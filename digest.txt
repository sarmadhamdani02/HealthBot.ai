Directory structure:
└── HealthBitai/
    ├── README.md
    ├── middleware.ts
    ├── next-env.d.ts
    ├── next.config.mjs
    ├── package.json
    ├── postcss.config.mjs
    ├── tailwind.config.ts
    ├── tsconfig.json
    ├── .env.local
    ├── .eslintrc.json
    ├── .prettierignore
    ├── .prettierrc
    ├── public/
    ├── scraper/
    │   ├── oladoc-scraper.js
    │   └── oladoc-scraper.ts
    └── src/
        ├── auth.ts
        ├── scrapeDoctorsTest.js
        ├── app/
        │   ├── globals.css
        │   ├── layout.tsx
        │   ├── middleware.ts
        │   ├── page.tsx
        │   ├── (auth)/
        │   │   ├── forgot-password/
        │   │   │   ├── forgotContext.tsx
        │   │   │   └── page.tsx
        │   │   ├── login/
        │   │   │   ├── LoginContent.tsx
        │   │   │   └── page.tsx
        │   │   └── signup/
        │   │       ├── page.tsx
        │   │       └── signupContext.tsx
        │   ├── (screens)/
        │   │   ├── chatscreen/
        │   │   │   ├── ChatscreenContext.tsx
        │   │   │   └── page.tsx
        │   │   ├── dashboard/
        │   │   │   ├── Dashboard.tsx
        │   │   │   ├── DashboardContent.tsx
        │   │   │   └── page.tsx
        │   │   ├── doctorscreen/
        │   │   │   ├── DoctorContext.tsx
        │   │   │   └── page.tsx
        │   │   └── profile/
        │   │       ├── ProfileContext.tsx
        │   │       └── page.tsx
        │   ├── api/
        │   │   ├── auth/
        │   │   │   └── [...nextauth]/
        │   │   │       ├── options.ts
        │   │   │       └── route.ts
        │   │   ├── doctors/
        │   │   │   └── route.ts
        │   │   └── users/
        │   │       ├── getUser.ts
        │   │       ├── google-signup/
        │   │       │   └── route.ts
        │   │       └── users/
        │   │           └── [email].ts
        │   ├── auth/
        │   │   ├── signin/
        │   │   │   └── signin-action.ts
        │   │   └── signup/
        │   │       └── signup-action.ts
        │   └── components/
        │       ├── DoctorAppointmentCard.tsx
        │       ├── DoctorRecommendationComponent.tsx
        │       ├── Footer.tsx
        │       ├── Header.tsx
        │       └── Logo.tsx
        ├── lib/
        │   ├── dbconnect.ts
        │   ├── firebase.ts
        │   ├── firebaseAdmin.ts
        │   ├── getSession.ts
        │   ├── scrapeDoctors.js
        │   ├── scrapeDoctors.ts
        │   └── scraper/
        │       ├── oladoc-scraper.js
        │       └── oladoc-scraper.ts
        ├── models/
        │   ├── Dashboard.ts
        │   └── User.ts
        ├── types/
        │   └── ApiResponse.ts
        └── utils/
            └── api.js

================================================
File: README.md
================================================
# HealthBot! ✨



================================================
File: middleware.ts
================================================
// import { NextRequest, NextResponse } from 'next/server';
// import { cookies } from 'next/headers';

// export async function middleware(request: NextRequest) {
//   const cookieStore = cookies(); // Use the cookies() helper instead of req.cookies
//   const sessionCookie = cookieStore.get('firebase-session')?.value; // Access the session cookie
//   const { pathname } = request.nextUrl; // Get the URL of the request

//   // Redirect logged-in users away from the login page
//   if (pathname === '/login' && sessionCookie) {
//     return NextResponse.redirect(new URL('/dashboard', request.url));
//   }
//   if (pathname === '/signup' && sessionCookie) {
//     return NextResponse.redirect(new URL('/dashboard', request.url));
//   }
//   // Redirect non-authenticated users away from the dashboard page
//   if (pathname === '/dashboard' && !sessionCookie) {
//     return NextResponse.redirect(new URL('/', request.url));
//   }
//   return NextResponse.next();
// }

// export const config = {
//   matcher: ['/login', '/dashboard'], // Match the routes that need protection
// };



================================================
File: next-env.d.ts
================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.



================================================
File: next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;



================================================
File: package.json
================================================
{
  "name": "health-bot",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev -p 4000",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@firebase/storage": "^0.13.2",
    "@headlessui/react": "^2.1.2",
    "@material-ui/core": "^4.12.4",
    "@material-ui/icons": "^4.11.3",
    "@remixicon/react": "^4.2.0",
    "axios": "^1.7.7",
    "bcryptjs": "^2.4.3",
    "cheerio": "^1.0.0",
    "firebase": "^10.13.2",
    "firebase-admin": "^12.5.0",
    "framer-motion": "^12.4.11",
    "lucide-react": "^0.469.0",
    "mongoose": "^8.6.2",
    "next": "14.2.5",
    "next-auth": "^5.0.0-beta.20",
    "nodemailer": "^6.9.15",
    "nookies": "^2.5.2",
    "puppeteer": "^23.11.1",
    "react": "^18",
    "react-dom": "^18",
    "react-firebase-hooks": "^5.1.1",
    "react-icons": "^5.3.0",
    "react-markdown": "^10.1.0",
    "remark-gfm": "^4.0.1"
  },
  "devDependencies": {
    "@types/bcryptjs": "^2.4.6",
    "@types/node": "^20",
    "@types/nodemailer": "^6.4.16",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.4.20",
    "eslint": "^8",
    "eslint-config-next": "14.2.5",
    "postcss": "^8.4.41",
    "tailwindcss": "^3.4.10",
    "typescript": "^5"
  }
}



================================================
File: postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;



================================================
File: tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
 
    // Or if using `src` directory:
    "./src/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    screens:{
      xs:"300px",
      sm: "640px",
      md: "768px",
      lg:"1080px",
      xl:"1280px",
      ["2xl"]:"1536px",
    },
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
    },
  },
  plugins: [],
};
export default config;



================================================
File: tsconfig.json
================================================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "src/scrapeDoctorsTest.js", "src/scrapeDoctorsTest.js", "src/scrapeDoctorsTest.js"],
  "exclude": ["node_modules"]
}



================================================
File: .env.local
================================================
# NEXT_PUBLIC_FIREBASE_API_KEY= "AIzaSyDUorqHtYQVahiHKr2b9KX-Wzewl9c6zbc",
# NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN= "healthbot-d9d6a.firebaseapp.com",
# NEXT_PUBLIC_FIREBASE_PROJECT_ID= "healthbot-d9d6a",
# NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET= "healthbot-d9d6a.appspot.com",
# NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID= "630460192071",
# NEXT_PUBLIC_FIREBASE_APP_ID="1:630460192071:web:d6d02d94307941eda3e862",

NEXT_PUBLIC_FIREBASE_API_KEY=AIzaSyDUorqHtYQVahiHKr2b9KX-Wzewl9c6zbc
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=healthbot-d9d6a.firebaseapp.com
NEXT_PUBLIC_FIREBASE_PROJECT_ID=healthbot-d9d6a
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=healthbot-d9d6a.appspot.com
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=630460192071
NEXT_PUBLIC_FIREBASE_APP_ID=1:630460192071:web:d6d02d94307941eda3e862

FIREBASE_SERVICE_ACCOUNT_KEY='{
  "type": "service_account",
  "project_id": "healthbot-d9d6a",
  "private_key_id": "9b6ad7d9c1e81291998454b86470b80249c44659",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC0Rb4/pvKM8owu\nVbrwlzG23LdZ8r8uFpiD5C6uSp8Wcgl25KyETKU23I1N3xVqV6MtLK+QHFefyfcs\nscZtCQqP1jyCWEt7h9BJW1vQSt7JQiJG8hAmyLA83PVuTTs91bS0Xh+WkfRG6B8V\nz3Gg2MVtdsBi4d6yn7I5AN6ALsNSdptXM/yRYurtBOmp/fC5kP/GlCtglPhpT5Dx\nooUlw0nic+cQeTapqzbY8g13w1kHm2TCmaITrSFXtFpRqMT5ZydNOc/+pSnumMuW\nm+EDEhoZVeZZPnkAKRpN1OrKiw0c2FWad3DeqcnT73Y/tfNpUhqyR7n4FaiGv1KV\nYeNuIh7XAgMBAAECggEAOg/MesvWizcDl1jdYOgRhwgHtdzNXpbAgJpZvqEiJCSO\nj9CPD/1vqP/YMyCK0TlwwPgHg67dOgXeqnKHqk6jLDigPIsbpKnVmArow2mZ39CB\nIcCNGzDAMpooImKVlhDipsU5/1D7EGtqt6ecvWWUEPGSfUaqZ3Wv/VQeVcK5/jDS\nSKUdbcjCnmTdsODVIehvzcjAVHMJLNgp3vrELz8HSyd1HUQSjkuGC6xtLJdkZU8U\nHvxUPsimtZaAq+6CbahBhJuC4GhSpp0BhypQocSEPYdebcZU41gv4GEhjN5AlIIN\n0R4v2S2x69xhzpQFp9xz74NEtfZVXfBWxVAT70sAoQKBgQDsk1GW2I9GuHdW3Vxd\nyiZT/KKJs5o3DNCy3p6c1dWgb3s8xPjbRd0azjKUQl6JGFwFJ6byIyc4c3XVtWNO\n5nimo209iFV4LRXLRtXH+bOZbbxlKpx2JqCxpI6QyGwUHEvN0KyB666FbMjKx5N0\nuvSvVBbRWBJNnomxPG3Z8UaXNQKBgQDDEveGC2q0Re09J14FMn2FiLyIiB4mUS0K\n6P7ru3EAskuR1f1slUM24Qu5hhAlZ6lnfN1mTvdD36taOsV09MXb9AK33b/d0W2O\nmLCb+HkQJS0tSlMAKUYy5xFBb89YopjTCoIaw3gZvd0B+sGpRsPtuKC6Ip6/nZOj\ngrAaxAnDWwKBgQCAY8cgtXC0ccIae1H4eI/qfq37S2SDQco1eMnd1dL1Geto5IEm\nBzlipcsfWRGTF4xBI+7fdCKB6W9mxuUZWczaqtDLVyUDbnxocI3u1F4bA0n+IWz+\nViJZpjPU8WBuXZjqHriwXaa+NHaYTk2BSUEnsdwcSs7MHyEc9e2sHNwxjQKBgCsy\nF/1mqcohcdcI0Jj2BTV8gcL54TM65m50CX7JksxErtcsO2G/65JLYv1B4nFl8u0n\niR8OfVJaROdF/FNZoDaEYdW1FLdZmJjq1rCy5Jven5JX0ulGOnUrFXcX+yH1X0Hc\nIdMrVXzdvgKiNB/3u4r4Rx7wa5ainf6nAbfrkP3hAoGBAJP7nOdvFl9APuXgHdII\ndr4UJe6HRWW01o3UQCDaiEZJFIvybI2Mnv0/Oz2rAwpxhsMRhN+p0LmzD6GI1zV4\nwj0C90Da9wws2RMGE/Ie+dSQ5JKQTKXHNiXDOJxyfKANM2P0Nrr23Mujabd+b5aV\n6hcEnZvMRjVRzZK45Rz49rt/\n-----END PRIVATE KEY-----\n",
  "client_email": "firebase-adminsdk-s0bak@healthbot-d9d6a.iam.gserviceaccount.com",
  "client_id": "116866382749609524371",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-s0bak%40healthbot-d9d6a.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
}'
NEXTAUTH_SECRET=ktq/tG2S8Te1/OLJh5U1YD1KTknyBbSQJt46cFtvjMc=


================================================
File: .eslintrc.json
================================================
{
  "extends": "next/core-web-vitals"
}



================================================
File: .prettierignore
================================================
/.vscode
/node_modules
./dist
*.env
.env
.env.*


================================================
File: .prettierrc
================================================
{
    "singleQuote": false,
    "bracketSpacing": true,
    "tabWidth": 4,
    "semi": true,
    "trailingComma": "es5"
}



================================================
File: scraper/oladoc-scraper.js
================================================
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
// import puppeteer from 'puppeteer';
var puppeteer = require('puppeteer');
var OladocScraper = /** @class */ (function () {
    function OladocScraper(city) {
        this.city = city;
    }
    OladocScraper.prototype.scrape = function () {
        return __awaiter(this, void 0, void 0, function () {
            var browser, page, doctors;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, puppeteer.launch()];
                    case 1:
                        browser = _a.sent();
                        return [4 /*yield*/, browser.newPage()];
                    case 2:
                        page = _a.sent();
                        return [4 /*yield*/, page.goto("https://oladoc.com/pakistan/".concat(this.city.toLowerCase(), "/general-physician"), {
                                waitUntil: 'networkidle2',
                            })];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, page.evaluate(function () {
                                var doctorElements = document.querySelectorAll('.row.doctor-picture-frame');
                                return Array.from(doctorElements).map(function (doctor) {
                                    var _a, _b, _c, _d, _e, _f, _g, _h;
                                    var name = ((_b = (_a = doctor.querySelector('.doctor-name')) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.trim()) || '';
                                    var speciality = ((_d = (_c = doctor.querySelector('.od-text-dark-muted')) === null || _c === void 0 ? void 0 : _c.textContent) === null || _d === void 0 ? void 0 : _d.trim()) || '';
                                    var experience = ((_f = (_e = doctor.querySelector('.text-truncate')) === null || _e === void 0 ? void 0 : _e.textContent) === null || _f === void 0 ? void 0 : _f.trim()) || '';
                                    var image = ((_g = doctor.querySelector('.avatar img')) === null || _g === void 0 ? void 0 : _g.getAttribute('src')) || '';
                                    var profileLink = ((_h = doctor.querySelector('.doctor-name')) === null || _h === void 0 ? void 0 : _h.getAttribute('href')) || '';
                                    return {
                                        name: name,
                                        speciality: speciality,
                                        experience: experience,
                                        image: image,
                                        profileLink: profileLink,
                                    };
                                });
                            })];
                    case 4:
                        doctors = _a.sent();
                        return [4 /*yield*/, browser.close()];
                    case 5:
                        _a.sent();
                        console.log(doctors); // Logs the scraped doctors
                        return [2 /*return*/, doctors];
                }
            });
        });
    };
    return OladocScraper;
}());
(function () { return __awaiter(_this, void 0, void 0, function () {
    var scraper;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                scraper = new OladocScraper("lahore");
                return [4 /*yield*/, scraper.scrape()];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); })();



================================================
File: scraper/oladoc-scraper.ts
================================================
// import puppeteer from 'puppeteer';
const puppeteer = require('puppeteer');

interface Doctor {
  name: string;
  speciality: string;
  experience: string;
  image: string;
  profileLink: string;
}

 class OladocScraper {
  
  constructor(private city: string) {}

  async scrape(): Promise<Doctor[]> {
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.goto(`https://oladoc.com/pakistan/${this.city.toLowerCase()}/general-physician`, {
      waitUntil: 'networkidle2',
    });

    const doctors = await page.evaluate(() => {
      const doctorElements = document.querySelectorAll('.row.doctor-picture-frame');
      return Array.from(doctorElements).map((doctor) => {
        const name = doctor.querySelector('.doctor-name')?.textContent?.trim() || '';
        const speciality = doctor.querySelector('.od-text-dark-muted')?.textContent?.trim() || '';
        const experience = doctor.querySelector('.text-truncate')?.textContent?.trim() || '';
        const image = doctor.querySelector('.avatar img')?.getAttribute('src') || '';
        const profileLink =
          doctor.querySelector('.doctor-name')?.getAttribute('href') || '';

        return {
          name,
          speciality,
          experience,
          image,
          profileLink,
        };
      });
    });

    await browser.close();
    console.log(doctors); // Logs the scraped doctors
    return doctors;
  }
}

(async () => {
  const scraper = new OladocScraper("lahore");
  await scraper.scrape();
})();



================================================
File: src/auth.ts
================================================
import NextAuth, { CredentialsSignin } from "next-auth"
import Credentials from "next-auth/providers/credentials";
import dbConnect from "./lib/dbConnect";
import User from "./models/User";
import { compare } from "bcryptjs";
import Google from "next-auth/providers/google";
import { JWT } from "next-auth/jwt";

export const { handlers, signIn, signOut, auth } = NextAuth({
  providers: [

    Credentials({
      name: 'Credentials',

      credentials:{
        email: {label: "Email", type: "email"},
        password: {label: "Password", type: "password"},
      },
      
      authorize: async (credentials) =>{
        const email = credentials.email as string | undefined;
        const password = credentials.password as string | undefined;
        console.log(email);

        if(!email || !password){
          throw new CredentialsSignin('Please provide both email and password')
        }

        await dbConnect();

        const user = await User.findOne({email}).select('+password');
        console.log(user);
        if(!user){
          throw new CredentialsSignin('Invalid email or password')
          
        }
        if(!user.password){
          throw new Error("Invalid : password");

        }

        const isMatched = await compare(password,user.password)
        if(!isMatched){
          throw new Error("Invalid password");
        }
        const userData = {
          firstName: user.firstName,
          lastName: user.lastName,
          email: user.email,
          role:user.role,
          id: user.id,
        }
        return userData;
      }
    })
  ],
  pages:{
    signIn:"/login",
  },
}
);


================================================
File: src/scrapeDoctorsTest.js
================================================
const { scrapeDoctors } = require('./lib/scrapeDoctors');

const testScraping = async () => {
    console.log('Started..');  // Check if the data is being returned as expected

    const location = 'attock';  // Replace with your desired location
    const doctors = await scrapeDoctors(location);
    console.log('Doctors:', doctors);  // Check if the data is being returned as expected
};

testScraping();



================================================
File: src/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

/* In your global CSS file (e.g., index.css, App.css, or styles.css) */
::selection {
  background-color: #7861f3;
  color: white; /* Optional: change text color for better contrast */
}

/* For better browser compatibility */
::-moz-selection {
  background-color: #7861f3;
  color: white;
}

.neon-border {
  position: relative;
  border-right: 2px solid transparent;
  border-image: linear-gradient(45deg, #ff00ff, #00ffff, #00ff00, #ffff00) 1;
  animation: neon-move 5s ease-in-out infinite;
}

/* Keyframes for the animation */
@keyframes neon-move {
  0% {
    border-image: linear-gradient(45deg, #ff00ff, #00ffff, #00ff00, #ffff00) 1;
    box-shadow: 0 0 20px rgba(255, 0, 255, 0.8), 0 0 20px rgba(0, 255, 255, 0.8);
  }
  50% {
    border-image: linear-gradient(135deg, #00ffff, #00ff00, #ffff00, #ff00ff) 1;
    box-shadow: 0 0 20px rgba(0, 255, 255, 0.8), 0 0 20px rgba(0, 255, 0, 0.8);
  }
  100% {
    border-image: linear-gradient(45deg, #ff00ff, #00ffff, #00ff00, #ffff00) 1;
    box-shadow: 0 0 20px rgba(255, 0, 255, 0.8), 0 0 20px rgba(0, 255, 255, 0.8);
  }
}




@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}



================================================
File: src/app/layout.tsx
================================================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  );
}



================================================
File: src/app/middleware.ts
================================================
// src/app/middleware.ts
import { NextResponse, NextRequest } from 'next/server';
import { adminAuth } from '@/lib/firebaseAdmin'; // Ensure correct import

export async function middleware(req: NextRequest) {
  const { pathname } = req.nextUrl;
  const token = req.cookies.get('token'); // Get the token from cookies

  try {
    const user = token ? await adminAuth.verifyIdToken(token.value) : null;
console.log("user data from middleware is: "+user);
    // Check if the user is signed in
    if (user) {
      // User is signed in
      if (pathname === '/login' || pathname === '/signup' || pathname === '/') {
        return NextResponse.redirect(new URL('/dashboard', req.url)); // Redirect to dashboard
      }
    } else {
      // User is not signed in
      if (pathname === '/dashboard' || pathname === '/profile') {
        return NextResponse.redirect(new URL('/', req.url)); // Redirect to home
      }
    }
  } catch (error) {
    console.error('Error verifying token:', error);
  }

  return NextResponse.next(); // Proceed to the requested route
}

export const config = {
  matcher: ['/login', '/signup', '/dashboard', '/profile', '/'], // Add other routes to protect
};



================================================
File: src/app/page.tsx
================================================
'use client';

import Link from 'next/link';
import { 
  Heart, 
  Activity, 
  Calendar, 
  Users, 
  ArrowRight, 
  Bot, 
  Stethoscope, 
  Pulse, 
  ShieldCheck, 
  Sparkles 
} from 'lucide-react';
import React from 'react';
import Logo from './components/Logo';

// Define the icon components map to ensure they're always available
const iconComponents = {
  Heart,
  Activity,
  Calendar,
  Users,
  ArrowRight,
  Bot,
  Stethoscope,
  Pulse,
  ShieldCheck,
  Sparkles
};

interface FeatureCardProps {
  icon: keyof typeof iconComponents;
  title: string;
  description: string;
}

const FeatureCard = ({ icon, title, description }: FeatureCardProps) => {
  const IconComponent = iconComponents[icon];
  
  if (!IconComponent) {
    console.error(`Icon "${icon}" not found`);
    return null;
  }

  return (
    <div className="bg-gradient-to-br from-white/80 to-white/20 backdrop-blur-sm p-8 rounded-3xl border border-white/20 hover:shadow-xl transition-all duration-300 hover:-translate-y-2 hover:border-transparent hover:bg-white/90 group">
      <div className="inline-block p-4 bg-gradient-to-br from-[#6366F1] to-[#8B5CF6] rounded-2xl group-hover:rotate-6 transition-transform duration-300">
        <IconComponent className="w-6 h-6 text-white" />
      </div>
      <h3 className="text-2xl font-bold mt-6 mb-3 text-gray-900">{title}</h3>
      <p className="text-gray-700">{description}</p>
    </div>
  );
};

export default function Home() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-[#F0F9FF] to-[#E0F2FE]">
      {/* Header */}
      <header className="container mx-auto flex justify-between items-center py-8 px-6">
        <Logo/>
        <div className="flex items-center gap-4">
          <Link href="/login">
            <button className="text-[#6366F1] font-medium hover:text-[#8B5CF6] transition-colors duration-300">
              Login
            </button>
          </Link>
          <Link href="/signup">
            <button className="text-white bg-gradient-to-r from-[#6366F1] to-[#8B5CF6] py-2.5 px-6 rounded-full hover:shadow-lg hover:shadow-[#6366F1]/40 transition-all duration-300 font-medium hover:from-[#7173f0] hover:to-[#9a6cf6]">
              Sign Up
            </button>
          </Link>
        </div>
      </header>

      {/* Hero Section */}
      <main className="container mx-auto px-6 mt-16">
        <div className="text-center max-w-4xl mx-auto">
          <div className="inline-flex items-center gap-2 bg-white/50 backdrop-blur-sm px-4 py-2 rounded-full border border-white mb-6">
            <Sparkles className="w-4 h-4 text-[#8B5CF6]" />
            <span className="text-sm font-medium bg-gradient-to-r from-[#6366F1] to-[#8B5CF6] bg-clip-text text-transparent">
              Revolutionizing Healthcare
            </span>
          </div>
          <h2 className="text-5xl font-bold mb-6 text-gray-900 leading-tight">
            AI-Powered <span className="bg-gradient-to-r from-[#6366F1] to-[#8B5CF6] bg-clip-text text-transparent">Health Assistant</span> 
            <br />For Everyone
          </h2>
          <p className="text-gray-700 text-xl mb-10 leading-relaxed max-w-2xl mx-auto">
            HealthBot combines artificial intelligence with medical expertise to provide personalized health guidance, connect you with doctors, and help you achieve your wellness goals.
          </p>
          <div className="flex justify-center gap-4">
            <Link href="/signup">
              <button className="text-white bg-gradient-to-r from-[#6366F1] to-[#8B5CF6] py-4 px-10 rounded-full hover:shadow-lg hover:shadow-[#6366F1]/40 transition-all duration-300 text-lg font-medium group flex items-center gap-2">
                Get Started Free
                <ArrowRight className="w-5 h-5 group-hover:translate-x-1 transition-transform duration-200" />
              </button>
            </Link>
            <Link href="/login">
              <button className="text-[#6366F1] border-2 border-[#6366F1]/40 py-4 px-8 rounded-full hover:bg-[#6366F1]/5 transition-all duration-300 text-lg font-medium">
                See Demo
              </button>
            </Link>
          </div>
        </div>

        {/* Features Grid */}
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mt-28 mb-28">
          <FeatureCard 
            icon="Calendar"
            title="Smart Scheduling"
            description="AI-powered appointment booking that finds the perfect time for you and your doctor."
          />
          <FeatureCard 
            icon="Pulse"
            title="Health Insights"
            description="Advanced analytics and tracking for all your health metrics in one dashboard."
          />
          <FeatureCard 
            icon="Stethoscope"
            title="Doctor Network"
            description="Access to thousands of verified healthcare professionals across all specialties."
          />
          <FeatureCard 
            icon="Activity"
            title="Wellness Plans"
            description="Personalized health plans tailored to your specific needs and goals."
          />
          <FeatureCard 
            icon="ShieldCheck"
            title="Privacy First"
            description="Military-grade encryption to keep your health data completely secure."
          />
          <FeatureCard 
            icon="Users"
            title="Family Care"
            description="Manage health profiles for your entire family from one account."
          />
        </div>

        {/* CTA Section */}
        <div className="bg-gradient-to-r from-[#6366F1] to-[#8B5CF6] rounded-3xl p-12 text-center mb-28">
          <h3 className="text-3xl font-bold text-white mb-4">Ready to take control of your health?</h3>
          <p className="text-white/90 mb-8 text-lg max-w-2xl mx-auto">
            Join thousands of users who are already improving their health with HealthBot's smart assistance.
          </p>
          <Link href="/signup">
            <button className="text-[#6366F1] bg-white py-4 px-10 rounded-full hover:shadow-lg hover:bg-white/95 transition-all duration-300 text-lg font-medium group flex items-center gap-2 mx-auto">
              Start Your Journey
              <ArrowRight className="w-5 h-5 group-hover:translate-x-1 transition-transform duration-200" />
            </button>
          </Link>
        </div>
      </main>

      {/* Footer */}
      <footer className="container mx-auto px-6 py-12">
        <div className="flex flex-col md:flex-row justify-between items-center gap-8">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-gradient-to-br from-[#6366F1] to-[#8B5CF6] rounded-lg">
              <Bot className="w-6 h-6 text-white" />
            </div>
            <p className="text-gray-700">Developed with <Heart className="w-4 h-4 inline text-[#8B5CF6]" /> by Sarmad and Aalishaan</p>
          </div>
          <div className="flex flex-col sm:flex-row items-center gap-6">
            <Link href="/privacy" className="text-gray-600 hover:text-gray-900 transition-colors">Privacy Policy</Link>
            <Link href="/terms" className="text-gray-600 hover:text-gray-900 transition-colors">Terms of Service</Link>
            <Link href="/contact" className="text-gray-600 hover:text-gray-900 transition-colors">Contact Us</Link>
          </div>
        </div>
        <div className="border-t border-white/20 mt-8 pt-8 text-center">
          <p className="text-gray-600">© {new Date().getFullYear()} HealthBot. All rights reserved.</p>
        </div>
      </footer>
    </div>
  );
}


================================================
File: src/app/(auth)/forgot-password/forgotContext.tsx
================================================

'use client';

import React, { useState } from 'react';
import { auth } from '@/lib/firebase'; // Path to your firebase config
import { sendPasswordResetEmail } from 'firebase/auth';
import { useRouter } from 'next/navigation';

const ForgotContext = () => {
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const router = useRouter();

  const handleForgotPassword = async (e: React.FormEvent) => {
    e.preventDefault();
    setMessage(null);
    setError(null);
    setIsSubmitting(true);

    try {
      await sendPasswordResetEmail(auth, email);
      setMessage('Password reset link sent! Check your email.');
    } catch (error: any) {
      setError(error.message || 'Failed to send password reset email.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center">
      <h1 className="text-2xl font-semibold mb-6">Forgot Password</h1>
      
      {message && <p className="text-green-500">{message}</p>}
      {error && <p className="text-red-500">{error}</p>}

      <form onSubmit={handleForgotPassword} className="w-full max-w-md">
        <input
          type="email"
          placeholder="Enter your email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
          className="text-black border p-2 w-full mb-4 rounded"
        />
        <button
          type="submit"
          className="bg-green-500 text-white py-2 px-4 rounded w-full"
          disabled={isSubmitting}
        >
          {isSubmitting ? 'Sending...' : 'Send Reset Link'}
        </button>
      </form>
      
      <p className="mt-4">
        Go back to{' '}
        <a href="/login" className="text-blue-500 underline">
          Login
        </a>
      </p>
    </div>
  );
};

export default ForgotContext;



================================================
File: src/app/(auth)/forgot-password/page.tsx
================================================
// src/app/(auth)/forgot-password/page.tsx
import { cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import ForgotContext from './forgotContext';

export default function ForgotPassword() {
  // Check for the session cookie
  const sessionCookie = cookies().get('firebase-session')?.value;
  
  console.log(sessionCookie);

  // If there's a session, redirect to the dashboard
  if (!sessionCookie) {
    redirect('/');
  }

  // Render the client component if not logged in
  return <ForgotContext />;
}



























================================================
File: src/app/(auth)/login/LoginContent.tsx
================================================
'use client';

import React, { useState, useTransition, useEffect } from 'react';
import { RiGoogleFill } from '@remixicon/react';
import { useRouter } from 'next/navigation';
import { signInWithPopup } from 'firebase/auth';
import { auth, googleProvider } from '../../../lib/firebase';
import { signinAction } from '@/app/auth/signin/signin-action';

import Logo from '@/app/components/Logo';

const LoginContent = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isPending, startTransition] = useTransition();
  const [error, setError] = useState<string | null>(null); // Error state
  const router = useRouter();

  // Check if the user is already logged in and redirect to dashboard if so
  useEffect(() => {
    const token = document.cookie.replace(
      /(?:(?:^|.*;\s*)firebase-session\s*=\s*([^;]*).*$)|^.*$/,
      '$1'
    );
    if (token) {
      router.push('/dashboard');
    }
  }, [router]);

  const handleEmailSignIn = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null); // Reset error state
    startTransition(async () => {
      try {
        const { token, user } = await signinAction({ email, password });

        // Set the cookie with the token
        document.cookie = `firebase-session=${token}; path=/`;

        // Log the user data to the console
        console.log('Logged in with email:');
        console.log('Email:', email);
        console.log('User Info:', user); // Log full user information

        // Redirect to dashboard
        router.push('/dashboard');
      } catch (error: any) {
        console.error('Login error:', error.message);
        setError(error.message); // Set error message to state
      }
    });
  };

  const handleGoogleSignIn = async () => {
    try {
      const result = await signInWithPopup(auth, googleProvider);
      const user = result.user;

      // Extract user data from Firebase
      const userData = {
        firstname: user.displayName?.split(' ')[0] || '',
        lastname: user.displayName?.split(' ')[1] || '',
        email: user.email || '',
        image: user.photoURL || '',  // Store the Google profile image URL
        authProviderId: user.uid,    // Store the Google provider UID
      };

      // Log the user data to the console before redirecting
      console.log('Logged in with Google:');
      console.log('First Name:', userData.firstname);
      console.log('Last Name:', userData.lastname);
      console.log('Email:', userData.email);
      console.log('Image URL:', userData.image);
      console.log('Auth Provider ID:', userData.authProviderId);

      // Get the ID token from Firebase
      const token = await user.getIdToken();

      // Set the cookie with the token
      document.cookie = `firebase-session=${token}; path=/;`;

      // Send user data to your MongoDB API
      const response = await fetch('/api/users/google-signup', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData),
      });

      if (!response.ok) {
        throw new Error('Failed to save user data to MongoDB');
      }

      // Redirect to dashboard on successful sign-in and save to MongoDB
      router.push('/dashboard');
    } catch (error) {
      console.error('Error signing in with Google:', error);
    }
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-[#F0F9FF] to-[#E0F2FE]">
      <header className="w-full flex justify-between p-6">
        <div />
        <h1 className="text-[#6366F1] text-3xl font-bold absolute top-10 left-[40%]">Welcome Back!</h1>
        <a href="/" className="text-[#6366F1] font-semibold absolute top-10 left-6 pl-10">
          <Logo />
        </a>
      </header>

      <div className="bg-white w-full max-w-md p-8 rounded-xl shadow-xl">
        {error && <p className="text-red-500 text-center mb-4">{error}</p>} {/* Display error message */}
        <form onSubmit={handleEmailSignIn}>
          <div className="space-y-4">
            <input
              id="email"
              type="email"
              placeholder="Enter Email"
              className="border border-[#6366F1] rounded-lg px-4 py-3 w-full text-[#6366F1] placeholder-[#6366F1] focus:ring-2 focus:ring-[#6366F1] transition-all duration-200"
              name="email"
              onChange={(e) => setEmail(e.target.value)}
              required
            />
            <input
              id="password"
              type="password"
              placeholder="Enter Password"
              className="border border-[#6366F1] rounded-lg px-4 py-3 w-full text-[#6366F1] placeholder-[#6366F1] focus:ring-2 focus:ring-[#6366F1] transition-all duration-200"
              name="password"
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>
          <button type="submit" disabled={isPending} className="mt-6 w-full bg-[#6366F1] text-white py-3 rounded-lg hover:bg-[#5A4BEF] transition-all duration-300">
            {isPending ? 'Signing in...' : 'Sign in with Email'}
          </button>
        </form>
        <button className="text-[#6366F1] mt-4" onClick={() => router.push("/forgot-password")}>Forgot password?</button>

        <div className="flex justify-center mt-6">
          <button onClick={handleGoogleSignIn} className="bg-[#6366F1] p-3 rounded-full shadow-md hover:shadow-xl transition-all duration-200">
            <RiGoogleFill className="text-white w-6 h-auto" />
          </button>
        </div>

        <p className="text-center mt-4 text-gray-600">
          Do not have an account?{' '}
          <a href="/signup" className="text-[#6366F1] font-semibold hover:underline">
            Sign up
          </a>
        </p>
      </div>
    </div>
  );
};

export default LoginContent;



================================================
File: src/app/(auth)/login/page.tsx
================================================
 
// import React, { useState, useTransition } from 'react';
// import { RiGoogleFill } from '@remixicon/react';
// import { useRouter } from 'next/navigation';
// import { signInWithPopup } from 'firebase/auth';
// import { auth, googleProvider } from '../../../lib/firebase';
// import { signinAction } from '@/app/auth/signin/signin-action';
import { cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import LoginContent from './LoginContent';
const LoginForm = () => {
  // const [email, setEmail] = useState('');
  // const [password, setPassword] = useState('');
  // const [isPending, startTransition] = useTransition();
  // const router = useRouter();

  // const handleEmailSignIn = (e: React.FormEvent) => {
  //   e.preventDefault();
  //   startTransition(async () => {
  //     try {
  //       await signinAction({ email, password });
  //       router.push('/dashboard');
  //     } catch (error) {
  //       console.error('Error signing in with email/password:', error);
  //       // Add some UI error handling here
  //     }
  //   });
  // };

  // const handleGoogleSignIn = async () => {
  //   try {
  //     await signInWithPopup(auth, googleProvider);
  //     router.push('/dashboard');
  //   } catch (error) {
  //     console.error('Error signing in with Google:', error);
  //     // Add some UI error handling here
  //   }
  // };
  const sessionCookie = cookies().get('firebase-session')?.value;
console.log(sessionCookie);
  // If there's no session, redirect to the login page
  if (sessionCookie) {
    redirect('/dashboard');
  }

  return <LoginContent/>
  // (

    // <div className="min-h-screen flex flex-col items-center justify-center bg-white">
    //   <header className="w-full flex justify-between p-6">
    //     <div />
    //     <h1 className="text-[#00DB0F] text-3xl font-bold absolute top-10 left-[40%] justify-center">Welcome Back!</h1>
    //     <a href="/" className="text-[#00DB0F] font-semibold absolute top-10 right-10 pl-10">HealthBot</a>
    //   </header>
      
    //   <div className="bg-white w-full max-w-md p-8 rounded-md shadow-md">
    //     <form onSubmit={handleEmailSignIn}>
    //       <div className="space-y-4">
    //         <input
    //           id="email"
    //           type="email"
    //           placeholder="Enter Email"
    //           className="border border-[#00DB0F] rounded-lg px-4 py-2 w-full text-[#00DB0F] placeholder-[#00DB0F] placeholder-opacity-70 focus:outline-none focus:ring-2 focus:ring-[#00DB0F]"
    //           name="email"
    //           onChange={(e) => setEmail(e.target.value)}
    //           required
    //         />
    //         <input
    //           id="password"
    //           type="password"
    //           placeholder="Enter Password"
    //           className="border border-[#00DB0F] rounded-lg px-4 py-2 w-full text-[#00DB0F] placeholder-[#00DB0F] placeholder-opacity-70 focus:outline-none focus:ring-2 focus:ring-[#00DB0F]"
    //           name="password"
    //           onChange={(e) => setPassword(e.target.value)}
    //           required
    //         />
    //       </div>
    //       <button type="submit" disabled={isPending} className="mt-6 w-full bg-[#00DB0F] text-white py-2 rounded-lg hover:bg-[#00DB0F]/90 transition duration-200">
    //         {isPending ? 'Signing in...' : 'Sign in with Email'}
    //       </button>
    //     </form>
        
    //     <div className="flex justify-center mt-6">
    //       <button onClick={handleGoogleSignIn} className="bg-[#00DB0F] p-2 rounded-full">
    //         <RiGoogleFill className='text-white w-6 h-auto' />
    //       </button>
    //     </div>
        
    //     <p className="text-center mt-4 text-gray-600">
    //       Do not have an account?{' '}
    //       <a href="/signup" className="text-[#00DB0F] font-semibold">Sign up</a>
    //     </p>
    //   </div>
    // </div>
  // );
};

export default LoginForm;



================================================
File: src/app/(auth)/signup/page.tsx
================================================
import { cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import SignUpContext from './signupContext';

export default function LoginPage() {
  // Check for the session cookie
  const sessionCookie = cookies().get('firebase-session')?.value;
  
  console.log(sessionCookie);

  // If there's a session, redirect to the dashboard
  if (sessionCookie) {
    redirect('/dashboard');
  }

  // Render the client component if not logged in
  return <SignUpContext />;
}




================================================
File: src/app/(auth)/signup/signupContext.tsx
================================================
'use client';

import React, { useState, useTransition } from 'react';
import { RiGoogleFill } from '@remixicon/react';
import { useRouter } from 'next/navigation';
import { createUserWithEmailAndPassword, signInWithPopup } from 'firebase/auth';
import { auth, googleProvider } from '../../../lib/firebase';
import Logo from '@/app/components/Logo';

const SignupContent = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [isPending, startTransition] = useTransition();
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();

  const handleEmailSignup = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);

    if (password !== confirmPassword) {
      setError('Passwords do not match!');
      return;
    }

    startTransition(async () => {
      try {
        const userCredential = await createUserWithEmailAndPassword(auth, email, password);
        const user = userCredential.user;
        console.log('User signed up:', user);
        document.cookie = `firebase-session=${await user.getIdToken()}; path=/`;
        router.push('/dashboard');
      } catch (error: any) {
        console.error('Signup error:', error.message);
        setError(error.message);
      }
    });
  };

  const handleGoogleSignup = async () => {
    try {
      const result = await signInWithPopup(auth, googleProvider);
      const user = result.user;
      console.log('Google signup successful:', user);
      document.cookie = `firebase-session=${await user.getIdToken()}; path=/`;
      router.push('/dashboard');
    } catch (error) {
      console.error('Google signup error:', error);
    }
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-[#F0F9FF] to-[#E0F2FE]">
      <header className="w-full flex justify-between p-6">
        <div />
        <h1 className="text-[#6366F1] text-3xl font-bold absolute top-10 left-[40%]">Create an Account</h1>
        {/* Logo moved to the top-left corner */}
        <a href="/" className="text-[#6366F1] font-semibold absolute top-10 left-6 pl-10">
          <Logo />
        </a>
      </header>

      <div className="bg-white w-full max-w-md p-8 rounded-xl shadow-xl">
        {error && <p className="text-red-500 text-center mb-4">{error}</p>}
        <form onSubmit={handleEmailSignup}>
          <div className="space-y-4">
            <input
              type="email"
              placeholder="Enter Email"
              className="border border-[#6366F1] rounded-lg px-4 py-3 w-full text-[#6366F1] placeholder-[#6366F1] focus:ring-2 focus:ring-[#6366F1] transition-all duration-200"
              onChange={(e) => setEmail(e.target.value)}
              required
            />
            <input
              type="password"
              placeholder="Enter Password"
              className="border border-[#6366F1] rounded-lg px-4 py-3 w-full text-[#6366F1] placeholder-[#6366F1] focus:ring-2 focus:ring-[#6366F1] transition-all duration-200"
              onChange={(e) => setPassword(e.target.value)}
              required
            />
            <input
              type="password"
              placeholder="Confirm Password"
              className="border border-[#6366F1] rounded-lg px-4 py-3 w-full text-[#6366F1] placeholder-[#6366F1] focus:ring-2 focus:ring-[#6366F1] transition-all duration-200"
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
            />
          </div>
          <button
            type="submit"
            disabled={isPending}
            className="mt-6 w-full bg-[#6366F1] text-white py-3 rounded-lg hover:bg-[#5A4BEF] transition-all duration-300"
          >
            {isPending ? 'Signing up...' : 'Sign up with Email'}
          </button>
        </form>

        <div className="flex justify-center mt-6">
          <button
            onClick={handleGoogleSignup}
            className="bg-[#6366F1] p-3 rounded-full shadow-md hover:shadow-xl transition-all duration-200"
          >
            <RiGoogleFill className="text-white w-6 h-auto" />
          </button>
        </div>

        <p className="text-center mt-4 text-gray-600">
          Already have an account?{' '}
          <a href="/login" className="text-[#6366F1] font-semibold hover:underline">
            Login
          </a>
        </p>
      </div>
    </div>
  );
};

export default SignupContent;



================================================
File: src/app/(screens)/chatscreen/ChatscreenContext.tsx
================================================
"use client";

import React, { useState, useRef, useEffect } from "react";
import { signOut } from "firebase/auth";
import { auth } from "@/lib/firebase";
import { useRouter } from "next/navigation";
import { motion, AnimatePresence } from "framer-motion";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import Header from "@/app/components/Header";
import { Bot, ArrowUp, User, Mic, LoaderCircle, Stethoscope, Sparkles, Lightbulb, Sparkle, ClipboardPlus, Volume2, X } from "lucide-react";

const ChatscreenContext = () => {
    const [showModal, setShowModal] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [doctorList, setDoctorList] = useState([]);

    const [isSpeaking, setIsSpeaking] = useState(false);
    const [currentSpeechId, setCurrentSpeechId] = useState<number | null>(null);

    const router = useRouter();
    const [prompt, setPrompt] = useState("");
    const [promptLoading, setPromptLoading] = useState(false);
    const [messages, setMessages] = useState([
        {
            type: "bot",
            content: "Hello! I'm your HealthBot assistant. How can I help you today?",
            symptoms: []
        },
    ]);
    const messagesEndRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    };

    const handleLogout = async () => {
        try {
            document.cookie.split(";").forEach((c) => {
                document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");
            });
            await signOut(auth);
            router.push("/login");
        } catch (error) {
            console.error("Logout error: ", error);
        }
    };

    const sessionCookie = document.cookie.split("; ").find((row) => row.startsWith("firebase-session"))?.split("=")[1];
    if (!sessionCookie) {
        router.push("/");
        return null;
    }

    const ArrowUpMessage = async () => {
        if (!prompt.trim() || promptLoading) return;

        const userMessage = { type: "user", content: prompt, symptoms: [] };
        setMessages((prevMessages) => [...prevMessages, userMessage]);
        setPrompt("");
        setPromptLoading(true);

        try {
            const response = await fetch("http://localhost:5000/healthbot_chat", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ query: prompt }),
            });
            const data = await response.json();

            const botMessage = {
                type: "bot",
                content: data.answer,
                symptoms: data.symptoms || [],
            };
            setMessages((prevMessages) => [...prevMessages, botMessage]);
        } catch (error) {
            console.error("Error sending message: ", error);
            setMessages((prevMessages) => [
                ...prevMessages,
                { type: "bot", content: "Sorry, I encountered an error. Please try again.", symptoms: [] },
            ]);
        }

        setPromptLoading(false);
    };

    // Add this function to your component
    const speakMessage = (text: string) => {
        if ('speechSynthesis' in window) {
            setIsSpeaking(true);
            const utterance = new SpeechSynthesisUtterance(text);
            const speechId = Date.now();
            setCurrentSpeechId(speechId);

            utterance.onstart = () => setIsSpeaking(true);
            utterance.onend = () => {
                if (currentSpeechId === speechId) {
                    setIsSpeaking(false);
                }
            };
            utterance.onerror = () => setIsSpeaking(false);

            window.speechSynthesis.cancel();
            window.speechSynthesis.speak(utterance);
        }
    };

    // Add cleanup
    useEffect(() => {
        return () => {
            if ('speechSynthesis' in window) {
                window.speechSynthesis.cancel();
            }
        };
    }, []);

    const showDoctorRecommendation = async () => {
        setShowModal(true);
        setIsLoading(true);

        try {
            const res = await fetch("http://localhost:5000/scrape", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    city: "attock", // make dynamic if needed
                    doctor: "general-physician"
                })
            });
            const data = await res.json();
            setDoctorList(data);
            setDoctorList(data.slice(0, 6));
        } catch (err) {
            console.error("Error fetching doctors:", err);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="min-h-screen flex flex-col bg-gradient-to-br from-[#F0F9FF] to-[#E0F2FE]">


            <Header />
            {showModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white rounded-xl shadow-lg w-full max-w-2xl max-h-[80vh] overflow-y-auto p-6 relative">
                        <button
                            className="absolute top-2 right-3 text-gray-400 hover:text-black text-xl"
                            onClick={() => setShowModal(false)}
                        >
                            &times;
                        </button>

                        <h2 className="text-lg font-semibold mb-4 text-center text-indigo-600 flex items-center justify-center">
                            <ClipboardPlus /> Recommended Doctors nearby
                        </h2>

                        {isLoading ? (
                            <div className="text-center py-10 text-indigo-500 flex items-center justify-center">
                                <p className="  text-indigo-500 flex items-center justify-center"> Finding Best Doctors for you <Sparkle className=" animate-spin ml-3" /></p>
                            </div>
                        ) : (
                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                {doctorList.map((doc, index) => (
                                    <a
                                        href={doc.profileLink}
                                        target="_blank"
                                        rel="noopener noreferrer"
                                        key={index}
                                        className="border rounded-lg p-4 flex gap-3 hover:shadow-md transition"
                                    >
                                        {doc.image ? (
                                            <img
                                                src={doc.image}
                                                alt={doc.name}
                                                className="w-16 h-16 object-cover rounded-full"
                                            />
                                        ) : (
                                            <div className="w-16 h-16 rounded-full bg-gray-200 flex items-center justify-center text-sm text-gray-500">
                                                N/A
                                            </div>
                                        )}

                                        <div className="flex-1">
                                            <h3 className="font-semibold text-sm text-gray-800">{doc.name}</h3>
                                            <p className="text-xs text-gray-500">{doc.speciality}</p>
                                            <p className="text-xs text-gray-400">{doc.experience}</p>
                                        </div>
                                    </a>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
            )}

            <main className="flex-1 overflow-y-auto p-4 pt-10 pb-24 mt-12">
                <div className="container mx-auto max-w-4xl space-y-4">
                    <AnimatePresence initial={false}>
                        {messages.map((message, index) => (
                            <motion.div
                                key={index}
                                initial={{ opacity: 0, y: 20, scale: 0.95 }}
                                animate={{ opacity: 1, y: 0, scale: 1 }}
                                exit={{ opacity: 0, scale: 0.95 }}
                                transition={{ duration: 0.3 }}
                                className={`flex items-start gap-3 ${message.type === "user" ? "justify-end" : ""}`}
                            >
                                {message.type === "bot" && (
                                    <div className="flex-shrink-0 w-10 h-10 rounded-full bg-gradient-to-br from-[#6366F1] to-[#8B5CF6] flex items-center justify-center shadow-md">
                                        <Bot className="w-6 h-6 text-white" />
                                    </div>
                                )}


                                {message.type === "bot" && (
                                    <div className="flex items-center gap-2 text-xs text-[#6366F1] font-medium mt-3">
                                        <button
                                            onClick={() => {
                                                if (isSpeaking) {
                                                    window.speechSynthesis.cancel();
                                                    setIsSpeaking(false);
                                                } else {
                                                    speakMessage(message.content);
                                                }
                                            }}
                                            className="p-1 hover:bg-[#6366F1]/10 rounded-full"
                                            aria-label={isSpeaking ? "Stop speaking" : "Read aloud"}
                                        >
                                            {isSpeaking ? (
                                                <X className="w-4 h-4" />
                                            ) : (
                                                <Volume2 className="w-4 h-4" />
                                            )}
                                        </button>
                                    </div>
                                )}

                                <motion.div
                                    className={`max-w-[85%] rounded-2xl px-4 py-3 relative ${message.type === "bot"
                                        ? "bg-white shadow-md text-gray-800 border border-white/30"
                                        : "bg-gradient-to-r from-[#6366F1] to-[#8B5CF6] text-white"
                                        }`}
                                    whileHover={{ scale: 1.02 }}
                                >
                                    {message.type === "bot" && index === 0 && (
                                        <div className="absolute -top-2 -right-2">
                                            <div className="inline-flex items-center gap-1 bg-white/90 backdrop-blur-sm px-2 py-1 rounded-full border border-white/30 shadow-sm sticky">
                                                <Sparkles className="w-3 h-3 text-[#8B5CF6]" />
                                                <span className="text-xs font-medium bg-gradient-to-r from-[#6366F1] to-[#8B5CF6] bg-clip-text text-transparent">
                                                    AI Assistant
                                                </span>
                                            </div>
                                        </div>
                                    )}

                                    <ReactMarkdown
                                        remarkPlugins={[remarkGfm]}
                                        components={{
                                            h1: ({ children }) => <h1 className="text-xl font-bold mb-2">{children}</h1>,
                                            h2: ({ children }) => <h2 className="text-lg font-semibold mb-2">{children}</h2>,
                                            h3: ({ children }) => <h3 className="text-md font-medium mb-2">{children}</h3>,
                                            strong: ({ children }) => <strong className="font-semibold">{children}</strong>,
                                            em: ({ children }) => <em className="italic">{children}</em>,
                                            p: ({ children }) => <p className="text-sm mb-2 last:mb-0">{children}</p>,
                                            ul: ({ children }) => <ul className="list-disc list-inside space-y-1 mb-2">{children}</ul>,
                                            ol: ({ children }) => <ol className="list-decimal list-inside space-y-1 mb-2">{children}</ol>,
                                            li: ({ children }) => <li className="ml-4">{children}</li>,
                                            code: ({ children }) => (
                                                <code className="bg-gray-100 p-1 rounded text-sm font-mono">
                                                    {children}
                                                </code>
                                            ),
                                        }}
                                    >
                                        {message.content}
                                    </ReactMarkdown>


                                    {message.type === "bot" && message.symptoms.length > 0 && (
                                        <div className="mt-3 pt-2 border-t border-gray-200">



                                            <div className="flex items-center gap-2 text-xs text-[#6366F1] font-medium mt-3">
                                                <Stethoscope className="w-4 h-4" />
                                                <span>Identified symptoms</span>
                                            </div>
                                            <div className="flex flex-wrap gap-2 mt-1">
                                                {message.symptoms.map((symptom, i) => (
                                                    <span
                                                        key={i}
                                                        className="px-2 py-1 bg-[#6366F1]/10 text-[#6366F1] rounded-full text-xs"
                                                    >
                                                        {symptom}
                                                    </span>
                                                ))}
                                            </div>

                                        </div>
                                    )}

                                    {message.type === "bot" && index !== 0 && (
                                        <div className="mt-3 pt-2 border-t border-gray-200">

                                            <button className=" cursor-pointer" onClick={() => { showDoctorRecommendation() }}>
                                                <div className="flex items-center gap-2 text-xs text-[#6366F1] font-medium hover:underline">
                                                    <Lightbulb className="w-4 h-4 mr-3" />
                                                    <span>Recommend Doctors?</span>
                                                </div>
                                            </button>
                                        </div>
                                    )}
                                </motion.div>

                                {message.type === "user" && (
                                    <div className="flex-shrink-0 w-10 h-10 rounded-full bg-gradient-to-br from-[#6366F1] to-[#8B5CF6] flex items-center justify-center shadow-md">
                                        <User className="w-6 h-6 text-white" />
                                    </div>
                                )}
                            </motion.div>
                        ))}
                    </AnimatePresence>
                    <div ref={messagesEndRef} />
                </div>
            </main>

            <footer className="fixed bottom-0 left-0 right-0 border-t backdrop-blur-sm bg-white/70 p-4 shadow-md">
                <div className="container mx-auto max-w-4xl">
                    <motion.div
                        className="flex gap-2"
                        initial={{ y: 20, opacity: 0 }}
                        animate={{ y: 0, opacity: 1 }}
                        transition={{ delay: 0.2 }}
                    >
                        <div className="flex-1 bg-white rounded-xl shadow-md border border-[#6366F1]/20 flex items-center overflow-hidden">
                            <input
                                type="text"
                                value={prompt}
                                onChange={(e) => setPrompt(e.target.value)}
                                onKeyDown={(e) => e.key === "Enter" && ArrowUpMessage()}
                                placeholder="Describe your symptoms or ask a health question..."
                                className="flex-1 px-4 py-3 text-gray-700 placeholder-gray-400 focus:outline-none"
                                disabled={promptLoading}
                            />
                            <motion.button
                                whileTap={{ scale: 0.9 }}
                                whileHover={{ scale: 1.05 }}
                                className="p-3 hover:bg-[#6366F1]/10 transition-colors"
                            >
                                <Mic className="w-5 h-5 text-[#6366F1]" />
                            </motion.button>
                        </div>
                        <motion.button
                            whileTap={{ scale: 0.9 }}
                            whileHover={{ scale: 1.05 }}
                            onClick={ArrowUpMessage}
                            disabled={promptLoading || !prompt.trim()}
                            className={`p-3 rounded-xl shadow-md transition-all ${promptLoading || !prompt.trim()
                                ? "bg-gray-300 cursor-not-allowed"
                                : "bg-gradient-to-br from-[#6366F1] to-[#8B5CF6] hover:shadow-[#6366F1]/40"}`}
                        >
                            {promptLoading ? (
                                <Sparkle className="w-5 h-5 text-white animate-spin" />
                            ) : (
                                <ArrowUp className="w-5 h-5 text-white" />
                            )}
                        </motion.button>
                    </motion.div>

                    <div className="flex justify-center mt-2">
                        <p className="text-xs text-gray-500">
                            HealthBot provides general health information only. Always consult a doctor.
                        </p>
                    </div>
                </div>
            </footer>
        </div>

    );
};

export default ChatscreenContext;


================================================
File: src/app/(screens)/chatscreen/page.tsx
================================================
// src/app/(screens)/dashboard/page.tsx
import { cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import ChatscreenContext from './ChatscreenContext';

 // Import the client component

export default function DashboardPage() {
  // Check for the session cookie on the server side
  const sessionCookie = cookies().get('firebase-session')?.value;
console.log(sessionCookie);
  // If there's no session, redirect to the login page
  if (!sessionCookie) {
    redirect('/');
  }

  // Render the client component
  return <ChatscreenContext />;
}



================================================
File: src/app/(screens)/dashboard/Dashboard.tsx
================================================
"use client";

import React, { useState, useEffect } from 'react';
import DoctorContext from '../doctorscreen/DoctorContext';
import DashboardContent from './DashboardContent';

const Dashboard = () => {
    const [bookings, setBookings] = useState([]);
    const [showDoctorContext, setShowDoctorContext] = useState(false);
    const [token, setToken] = useState(null);

    useEffect(() => {
        const storedToken = localStorage.getItem('firebase-session'); // Retrieve the token from cookies/localStorage
        setToken(storedToken);
    }, []);

    const handleUpdateBookings = (newBooking) => {
        setBookings(prev => [...prev, newBooking]);
    };

    const toggleDoctorContext = () => {
        setShowDoctorContext(!showDoctorContext);
    };

    return (
        <div>
            {showDoctorContext ? (
                <DoctorContext 
                    bookings={bookings} 
                    setBookings={handleUpdateBookings}
                    onClose={() => setShowDoctorContext(false)}
                />
            ) : (
                <DashboardContent 
                    token={token}  // Pass token to DashboardContent
                    bookings={bookings} 
                    onBookAppointment={() => setShowDoctorContext(true)}
                />
            )}
        </div>
    );
};

export default Dashboard;



================================================
File: src/app/(screens)/dashboard/DashboardContent.tsx
================================================
"use client";

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { signOut } from 'firebase/auth';
import { auth } from "@/lib/firebase";
import {
    MessageSquare,
    ChevronRight,
    Calendar,
    User,
    LogOut,
    Plus,
    Bot,
    Sparkles
} from 'lucide-react';
import DoctorAppointmentCard from '@/app/components/DoctorAppointmentCard';
import Header from '@/app/components/Header';

const getBookingsFromLocalStorage = (token) => {
    if (typeof window === 'undefined') return [];

    const storedAppointments = localStorage.getItem(token);
    if (storedAppointments) {
        try {
            return JSON.parse(storedAppointments);
        } catch (error) {
            console.error('Error parsing appointments:', error);
            return [];
        }
    }
    return [];
};

const DashboardContent = () => {
    const router = useRouter();
    const [bookings, setBookings] = useState([]);

    useEffect(() => {
        const token = document.cookie.split('; ').find(row => row.startsWith('firebase-session='))?.split('=')[1];
        if (token) {
            const userBookings = getBookingsFromLocalStorage(token);
            setBookings(userBookings);
        }
    }, []);

    const handleLogout = async () => {
        try {
            await signOut(auth);
            router.push('/login');
        } catch (error) {
            console.error("Logout error: ", error);
        }
    };

    return (
        <div className="min-h-screen bg-gradient-to-br from-[#F0F9FF] to-[#E0F2FE] relative">
            {/* Floating AI Chat Button */}
            <button 
                onClick={() => router.push('/chatscreen')}
                className="fixed bottom-8 right-8 z-50 flex items-center gap-3 px-6 py-4 rounded-full shadow-2xl hover:shadow-3xl transition-all duration-300"
                style={{
                    background: 'linear-gradient(135deg, #6366F1 0%, #8B5CF6 30%, #EC4899 70%, #F97316 100%)',
                    backgroundSize: '200% 200%',
                    animation: 'gradientPulse 6s ease infinite',
                }}
            >
                <div className="relative">
                    <Bot className="w-6 h-6 text-white" />
                    <Sparkles className="absolute -top-1 -right-1 w-3 h-3 text-yellow-300 animate-pulse" />
                </div>
                <span className="text-white font-semibold text-lg">Chat With HealthBot AI</span>
                <div className="absolute inset-0 rounded-full bg-white opacity-0 hover:opacity-10 transition-opacity"></div>
            </button>

            {/* Header */}
            <Header />

            <main className="container mx-auto px-6 pb-16 space-y-8 pt-24">
                {/* Welcome Banner */}
                <div className="bg-gradient-to-r from-[#6366F1] to-[#8B5CF6] rounded-3xl p-8 text-white relative overflow-hidden">
                    <div className="absolute -right-10 -top-10 w-32 h-32 rounded-full bg-white/10"></div>
                    <div className="absolute -left-10 -bottom-10 w-40 h-40 rounded-full bg-white/5"></div>
                    <h2 className="text-2xl font-bold mb-2 relative z-10">Welcome back!</h2>
                    <p className="opacity-90 relative z-10">You have {bookings.length} upcoming appointment{bookings.length !== 1 ? 's' : ''}</p>
                </div>

                {/* Appointments Section */}
                <section className="bg-gradient-to-br from-white/80 to-white/20 backdrop-blur-sm rounded-3xl border border-white/20 shadow-sm overflow-hidden">
                    <div className="border-b border-white/20 p-6">
                        <div className="flex items-center justify-between">
                            <div className="flex items-center gap-3">
                                <div className="p-3 bg-gradient-to-br from-[#6366F1] to-[#8B5CF6] rounded-xl">
                                    <Calendar className="w-5 h-5 text-white" />
                                </div>
                                <h2 className="text-xl font-semibold text-gray-900">Upcoming Appointments</h2>
                            </div>
                            <button 
                            onClick={() => router.push('/doctorscreen')}
                            className="flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-[#6366F1] to-[#8B5CF6] text-white rounded-full text-sm font-medium hover:shadow-lg hover:shadow-[#6366F1]/40 transition-all">
                                <Plus className="w-4 h-4" />
                                New Appointment
                            </button>
                        </div>
                    </div>
                    <div className="p-6">
                        {bookings.length > 0 ? (
                            <div className="grid grid-cols-1 gap-4">
                                {bookings.map((booking, i) => (
                                    <DoctorAppointmentCard key={i} doctor={booking} />
                                ))}
                            </div>
                        ) : (
                            <div className="bg-white/50 border-dashed border-2 border-[#6366F1]/20 rounded-xl">
                                <div className="flex flex-col items-center justify-center py-12">
                                    <Calendar className="w-12 h-12 text-[#8B5CF6] mb-4" />
                                    <h3 className="text-xl font-medium text-gray-700 mb-2">No Upcoming Appointments</h3>
                                    <p className="text-gray-500 max-w-md text-center">Schedule your next appointment with our healthcare providers</p>
                                    <button
                                        onClick={() => router.push('/doctorscreen')}
                                        className="mt-4 flex items-center gap-2 px-6 py-2 bg-gradient-to-r from-[#6366F1] to-[#8B5CF6] text-white rounded-full text-sm font-medium hover:shadow-lg hover:shadow-[#6366F1]/40 transition-all">
                                        Book Now
                                        <ChevronRight className="w-4 h-4" />
                                    </button>
                                </div>
                            </div>
                        )}
                    </div>
                </section>
            </main>

            {/* Footer */}
            <footer className="container mx-auto px-6 py-8">
                <div className="border-t border-white/20 pt-8 text-center">
                    <p className="text-gray-600">© {new Date().getFullYear()} HealthBot. All rights reserved.</p>
                </div>
            </footer>

            {/* Add the animation style */}
            <style jsx>{`
                @keyframes gradientPulse {
                    0% { background-position: 0% 50%; }
                    50% { background-position: 100% 50%; }
                    100% { background-position: 0% 50%; }
                }
            `}</style>
        </div>
    );
};

export default DashboardContent;


================================================
File: src/app/(screens)/dashboard/page.tsx
================================================
// src/app/(screens)/dashboard/page.tsx
import { cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import DashboardContent from './DashboardContent';
 // Import the client component

export default function DashboardPage() {
  // Check for the session cookie on the server side
  const sessionCookie = cookies().get('firebase-session')?.value;
console.log("session: ", sessionCookie);
  // If there's no session, redirect to the login page
  if (!sessionCookie) {
    redirect('/');
  }

  // Render the client component
  return <DashboardContent />;
}



================================================
File: src/app/(screens)/doctorscreen/DoctorContext.tsx
================================================
"use client";

import React, { useState, useEffect } from "react";
import { signOut } from "firebase/auth";
import { auth } from "@/lib/firebase";
import { useRouter } from "next/navigation";
import Header from "@/app/components/Header";
import { Calendar as CalendarIcon, X, Star, MapPin, Clock, Search } from "lucide-react";

// Function to get Firebase token and bookings from cookies
const getBookingsFromCookies = () => {
  const cookie = document.cookie.split("; ").find(row => row.startsWith("firebase-session="));
  const token = cookie ? cookie.split("=")[1] : null;
  if (!token) return [];

  const bookings = localStorage.getItem(token); // Use token as the key in localStorage
  return bookings ? JSON.parse(bookings) : [];
};

// Function to save bookings to localStorage with the Firebase token as the key
const saveBookingsToStorage = (bookings) => {
  const cookie = document.cookie.split("; ").find(row => row.startsWith("firebase-session="));
  const token = cookie ? cookie.split("=")[1] : null;
  if (token) {
    console.log("Saving appointments for user token:", token);
    localStorage.setItem(token, JSON.stringify(bookings)); // Save bookings with token as the key
  } else {
    console.log("No user token found in cookies.");
  }
};

// Custom Modal Component
const Modal = ({ isOpen, onClose, children }) => {
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "unset";
    }
    return () => {
      document.body.style.overflow = "unset";
    };
  }, [isOpen]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div
        className="fixed inset-0 bg-black bg-opacity-50 transition-opacity"
        onClick={onClose}
      ></div>
      <div className="flex min-h-full items-center justify-center p-4">
        <div className="relative w-full max-w-md transform overflow-hidden rounded-2xl bg-white p-6 shadow-xl transition-all">
          {children}
        </div>
      </div>
    </div>
  );
};

const DoctorContext = () => {
  const router = useRouter();
  const [searchQuery, setSearchQuery] = useState("");
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedDoctor, setSelectedDoctor] = useState(null);
  const [appointmentDetails, setAppointmentDetails] = useState({
    date: "",
    time: "",
    name: "",
    phone: "",
    email: "",
  });

  const doctors = [
    {
        name: "Dr. Ayesha Khan",
        address: "City Clinic, Main Street",
        rating: 4.8,
        distance: "1.2km",
        specialization: "Dermatologist",
        available: "Today, 3:00 PM",
    },
    {
        name: "Dr. Zafar Malik",
        address: "Modern Health Center, Block C",
        rating: 4.5,
        distance: "2.0km",
        specialization: "Orthopedic Surgeon",
        available: "Tomorrow, 11:00 AM",
    },
    {
        name: "Dr. Maria Ahmed",
        address: "Prime Medical Complex, Street 5",
        rating: 5,
        distance: "1.8km",
        specialization: "Gynecologist",
        available: "Today, 5:00 PM",
    },
    {
        name: "Dr. Ahmed Raza",
        address: "Healing Hands Hospital, Sector B",
        rating: 4.7,
        distance: "3.5km",
        specialization: "Cardiologist",
        available: "Tomorrow, 9:00 AM",
    },
    {
        name: "Dr. Sofia Iqbal",
        address: "Wellness Clinic, Green Avenue",
        rating: 4.9,
        distance: "2.8km",
        specialization: "Pediatrician",
        available: "Today, 1:00 PM",
    },
    {
        name: "Dr. Usman Tariq",
        address: "Care Medical Center, Plaza Road",
        rating: 4.6,
        distance: "1.5km",
        specialization: "Dentist",
        available: "Tomorrow, 2:30 PM",
    },
    {
        name: "Dr. Farah Ali",
        address: "Sunshine Hospital, Old City",
        rating: 4.7,
        distance: "4.0km",
        specialization: "Neurologist",
        available: "Today, 4:30 PM",
    },
    {
        name: "Dr. Saeed Hassan",
        address: "City Health Clinic, Blue Block",
        rating: 4.8,
        distance: "1.0km",
        specialization: "ENT Specialist",
        available: "Tomorrow, 12:00 PM",
    },
    {
        name: "Dr. Samina Shah",
        address: "Health Plus Hospital, Park Lane",
        rating: 5,
        distance: "3.0km",
        specialization: "Endocrinologist",
        available: "Today, 6:00 PM",
    },
    {
        name: "Dr. Khalid Mehmood",
        address: "LifeCare Hospital, Downtown",
        rating: 4.6,
        distance: "2.3km",
        specialization: "Urologist",
        available: "Tomorrow, 10:00 AM",
    },
  ];

  const handleLogout = async () => {
    try {
      document.cookie = "firebase-session=; Max-Age=0; path=/"; // Clear the cookie on logout
      await signOut(auth);
      router.push("/login");
    } catch (error) {
      console.error("Logout error: ", error);
    }
  };

  const handleBookAppointment = (doctor) => {
    setSelectedDoctor(doctor);
    setIsModalOpen(true);
    console.log("Booking appointment for:", doctor.name);
  };

  const handleConfirmAppointment = () => {
    if (
      !appointmentDetails.name ||
      !appointmentDetails.date ||
      !appointmentDetails.time ||
      !appointmentDetails.phone ||
      !appointmentDetails.email
    ) {
      alert("Please fill in all the fields before booking.");
      return;
    }

    try {
      const selectedDate = new Date(appointmentDetails.date);
      const today = new Date();
      today.setHours(0, 0, 0, 0); // Set time to midnight for accurate date comparison

      if (selectedDate <= today) {
        alert("Please select a valid date (the date should be tomorrow or later).");
        return;
      }

      const newBooking = {
        ...appointmentDetails,
        doctorName: selectedDoctor?.name || "Unknown Doctor",
        specialization: selectedDoctor?.specialization || "Unknown Specialization",
      };

      // Get current bookings from cookies
      const currentBookings = getBookingsFromCookies();
      console.log("Current bookings from storage:", currentBookings);

      // Add new booking to the array
      const updatedBookings = [...currentBookings, newBooking];
      console.log("Updated bookings:", updatedBookings);

      // Save updated bookings to localStorage
      saveBookingsToStorage(updatedBookings);

      setIsModalOpen(false);
      setAppointmentDetails({
        name: "",
        date: "",
        time: "",
        phone: "",
        email: "",
      });

      alert("Appointment booked successfully!");
    } catch (error) {
      console.error("Error in handleConfirmAppointment:", error);
      alert("There was an error booking the appointment. Please try again.");
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-teal-50">
      <Header />

      <div className="container mx-auto px-4 py-6">
        <div className="max-w-2xl mx-auto">
          <div className="relative">
            <input
              type="text"
              placeholder="Search doctors, specializations..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full px-4 py-3 pl-12 rounded-xl border border-purple-100 focus:outline-none focus:ring-2 focus:ring-purple-500 bg-white/80 backdrop-blur-sm"
            />
          </div>

          <h2 className="text-purple-700 font-semibold text-lg mt-8 mb-4 flex items-center gap-2">
            Nearby Doctors
          </h2>
        </div>
      </div>

      <div className="container mx-auto px-4 pb-8">
        <div className="max-w-2xl mx-auto space-y-4">
          {doctors.map((doctor, i) => (
            <div
              key={i}
              className="bg-white text-black rounded-xl shadow-lg hover:shadow-xl transition-shadow overflow-hidden border border-purple-200"
            >
              <div className="p-4 sm:p-6">
                <div className="flex items-start gap-4">
                  <div className="w-20 h-20 rounded-full overflow-hidden bg-gradient-to-br from-purple-400 to-blue-300 p-1 flex-shrink-0">
                    <img
                      src="https://via.placeholder.com/80"
                      alt={doctor.name}
                      className="w-full h-full object-cover rounded-full"
                    />
                  </div>
                  <div className="flex-grow">
                    <div className="flex justify-between items-start">
                      <div>
                        <h2 className="text-lg font-semibold text-gray-800">{doctor.name}</h2>
                        <p className="text-purple-600 text-sm">{doctor.specialization}</p>
                      </div>
                    </div>

                    <div className="mt-4 flex justify-between items-center">
                      <button
                        onClick={() => handleBookAppointment(doctor)}
                        className="flex items-center gap-2 px-6 py-2 rounded-lg bg-purple-600 text-white hover:bg-purple-700 transition-colors"
                      >
                        <CalendarIcon className="w-4 h-4" />
                        <span>Book Appointment</span>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>
        <div className="relative">
          <button
            onClick={() => setIsModalOpen(false)}
            className="absolute right-0 top-0 p-2 rounded-full hover:bg-gray-100 transition-colors"
          >
            <X className="w-6 h-6 text-gray-500" />
          </button>
          <h2 className="text-xl font-semibold text-gray-800 mb-6">
            Book an Appointment with {selectedDoctor?.name}
          </h2>
          <div className="space-y-4">
            <div className="flex flex-col gap-2">
              <input
                type="text"
                placeholder="Your Name"
                className="px-4 py-2 rounded-lg border border-gray-300"
                value={appointmentDetails.name}
                onChange={(e) =>
                  setAppointmentDetails({ ...appointmentDetails, name: e.target.value })
                }
              />
              <input
                type="text"
                placeholder="Your Phone Number"
                className="px-4 py-2 rounded-lg border border-gray-300 text-purple-500"
                value={appointmentDetails.phone}
                onChange={(e) =>
                  setAppointmentDetails({ ...appointmentDetails, phone: e.target.value })
                }
              />
              <input
                type="email"
                placeholder="Your Email"
                className="px-4 py-2 rounded-lg border border-gray-300 text-purple-500"
                value={appointmentDetails.email}
                onChange={(e) =>
                  setAppointmentDetails({ ...appointmentDetails, email: e.target.value })
                }
              />
              <input
                type="date"
                className="px-4 py-2 rounded-lg border border-gray-300 text-purple-500"
                value={appointmentDetails.date}
                onChange={(e) =>
                  setAppointmentDetails({ ...appointmentDetails, date: e.target.value })
                }
              />
              <input
                type="time"
                className="px-4 py-2 rounded-lg border border-gray-300 text-purple-500"
                value={appointmentDetails.time}
                onChange={(e) =>
                  setAppointmentDetails({ ...appointmentDetails, time: e.target.value })
                }
              />
            </div>
            <div className="flex justify-center">
              <button
                onClick={handleConfirmAppointment}
                className="mt-4 px-6 py-2 rounded-lg bg-purple-600 text-white hover:bg-purple-700 transition-colors"
              >
                Confirm Appointment
              </button>
            </div>
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default DoctorContext;



================================================
File: src/app/(screens)/doctorscreen/page.tsx
================================================
// src/app/(screens)/dashboard/page.tsx
import { cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import DoctorContext from './DoctorContext';
 // Import the client component

export default function DoctorPage() {
  // Check for the session cookie on the server side
  const sessionCookie = cookies().get('firebase-session')?.value;
console.log(sessionCookie);
  // If there's no session, redirect to the login page
  if (!sessionCookie) {
    redirect('/');
  }

  // Render the client component
  return <DoctorContext />;
}



================================================
File: src/app/(screens)/profile/ProfileContext.tsx
================================================
// src/app/(screens)/dashboard/ProfileContext.tsx
"use client";

import React, { useEffect, useState } from 'react';
import { signOut } from 'firebase/auth'; 
import { auth } from "@/lib/firebase"; 
import { useRouter } from 'next/navigation';
import Header from '@/app/components/Header';


interface User {
  firstname: string;
  lastname: string;
  email: string;
  image?: string;
}

interface ProfileContextProps {
  user: User | null; // Accept user as a prop
}

const ProfileContext: React.FC<ProfileContextProps> = ({ user }) => {
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();

  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged((currentUser ) => {
      if (!currentUser ) {
        console.log('No user is signed in.');
        router.push('/login'); // Redirect to login if not signed in
      }
    });

    return () => unsubscribe();
  }, []);

  const handleLogout = async () => {
    try {
      // Clear all cookies in the browser
      document.cookie.split(";").forEach((c) => {
        document.cookie = c
          .replace(/^ +/, "")
          .replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");
      });
      await signOut(auth);
      router.push('/login');
    } catch (error) {
      console.error("Logout error: ", error);
    }
  };

  if (!user) {
    return <p>No user data available.</p>;
  }

  return (
    <div className="min-h-screen bg-white p-4">
      <Header/>

      <div className="bg-white w-full max-w-md p-8 rounded-md shadow-md flex flex-col items-center">
        <img
          src={user.image}
          alt="Profile Picture"
          className="w-32 h-32 rounded-full border-2 border-[#00DB0F] mb-4" 
        />
        <h2 className="text-xl font-semibold text-[#00DB0F]">{`${user.firstname} ${user.lastname}`}</h2>
        <p className="text-gray-600">{user.email}</p>

        <button
          onClick={() => alert('Edit Profile Clicked')} 
          className="mt-6 w-full bg-[#00DB0F] text-white py-2 rounded-lg hover:bg-[#00DB0F]/90 transition duration-200"
        >
          Edit Profile
        </button>
      </div>
    </div>
  );
};

export default ProfileContext;


================================================
File: src/app/(screens)/profile/page.tsx
================================================
// src/app/(screens)/dashboard/page.tsx
import { cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import ProfileContext from './ProfileContext';
import dbConnect from '@/lib/dbConnect'; // Ensure the path is correct
import User from '@/models/User'; // Ensure the path is correct

export default async function ProfilePage() {
  // Check for the session cookie on the server side
  const sessionCookie = cookies().get('firebase-session')?.value;

  console.log(sessionCookie);
  // If there's no session, redirect to the login page
  if (!sessionCookie) {
    redirect('/');
  }

  // Connect to the database
  await dbConnect();

  // Fetch user data based on the session cookie (assuming it contains the email)
  let user = null;
  try {
    const email = sessionCookie; // Adjust this if your session cookie structure is different
    user = await User.findOne({ email }).select('-password'); // Exclude password from the result
  } catch (error) {
    console.error("Error fetching user data:", error);
  }

  // Render the client component and pass user data as props
  return <ProfileContext user={user} />;
}


================================================
File: src/app/api/auth/[...nextauth]/options.ts
================================================



================================================
File: src/app/api/auth/[...nextauth]/route.ts
================================================
import { handlers } from "@/auth";
export const {GET , POST} = handlers;



================================================
File: src/app/api/doctors/route.ts
================================================



================================================
File: src/app/api/users/getUser.ts
================================================
// src/app/api/users/getUser.ts
import { NextResponse } from 'next/server';
import dbConnect from '../../../lib/dbConnect'; // Ensure you have this connection utility
import User from '../../../models/User'; // Adjust the path to your User model

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const email = searchParams.get('email'); // Get email from query parameters

  if (!email) {
    return NextResponse.json({ error: 'Email is required' }, { status: 400 });
  }

  try {
    await dbConnect(); // Ensure you're connected to the database
    const user = await User.findOne({ email }).select('-password'); // Exclude password from response

    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }

    return NextResponse.json(user);
  } catch (error) {
    console.error('Error fetching user:', error);
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
  }
}



================================================
File: src/app/api/users/google-signup/route.ts
================================================
// app/api/users/google-signup/route.ts
import { NextResponse } from 'next/server';
import dbConnect from '@/lib/dbConnect';
import User from '@/models/User';

export async function POST(req: Request) {
  try {
    await dbConnect();
    const { firstname, lastname, email, image, authProviderId } = await req.json();

    // Check if the user already exists based on email or authProviderId
    const existingUser = await User.findOne({ $or: [{ email }, { authProviderId }] });
    if (existingUser) {
      return NextResponse.json({ message: 'User already exists' }, { status: 200 });
    }

    // Create a new user in MongoDB
    const newUser = new User({
      firstname,
      lastname,
      email,
      image,
      authProviderId,
    });

    await newUser.save();

    return NextResponse.json({ message: 'User saved to MongoDB' }, { status: 201 });
  } catch (error) {
    console.error('Error saving user to MongoDB:', error);
    return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
  }
}



================================================
File: src/app/api/users/users/[email].ts
================================================
import type { NextApiRequest, NextApiResponse } from 'next';
import dbConnect from '@/lib/dbConnect'; // Adjust the path as needed
import User from '@/models/User'; // Adjust the import based on your User model's path

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // Ensure the method is GET and extract email from query
  if (req.method !== 'GET') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  const { email } = req.query; // Move the destructuring here

  if (typeof email !== 'string') {
    return res.status(400).json({ message: 'Invalid email' });
  }

  try {
    await dbConnect(); // Ensure you're connected to the database

    const userData = await User.findOne({ email });
    console.log("Database User Data:", userData); // Log the fetched user data

    if (!userData) {
      return res.status(404).json({ message: 'User not found' });
    }

    // Remove sensitive fields if needed (e.g., password, role, etc.)
    const { _id, firstname, lastname, image } = userData; // Exclude email if not needed
    return res.status(200).json({ _id, firstname, lastname, email, image });
  } catch (error) {
    console.error("API Error:", error);
    return res.status(500).json({ message: 'Error fetching user data' });
  }
}



================================================
File: src/app/auth/signin/signin-action.ts
================================================
// src/app/auth/signin/signin-action.ts
'use server';

import { auth } from '../../../lib/firebase';
import { signInWithEmailAndPassword, getIdToken } from 'firebase/auth';
import { setCookie } from 'nookies'; // Import nookies for cookie management


interface SignInData {
  email: string;
  password: string;
}

export async function signinAction({ email, password }: SignInData) {
  let token = 'aaa';
  try {
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;
    // Get the ID token
    token = await getIdToken(user);

    return {
      uid: userCredential.user.uid,
      email: userCredential.user.email,
      displayName: userCredential.user.displayName,
      token:token, // Include the ID token in the response
      redirect: '/dashboard', // Redirect to the dashboard after successful sign-in
    };
  } catch (error) {
    console.error('Sign-in error:', error);
    if (error instanceof Error) {
      throw new Error('Failed to sign in: ' + error.toString());
    } else {
      throw new Error('Failed to sign in: Unknown error');
    }
  }
}



================================================
File: src/app/auth/signup/signup-action.ts
================================================
// signup-action.ts
'use server';

import dbConnect from '@/lib/dbConnect';
import User from '@/models/User';
import { hash } from 'bcryptjs';
import { auth } from '../../../lib/firebase'; 
import { createUserWithEmailAndPassword,getIdToken, sendEmailVerification } from 'firebase/auth';

interface SignupData {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
}

export async function signupAction({ firstName, lastName, email, password }: SignupData) {
  
  await dbConnect();

  const existingUser = await User.findOne({ email });
  if (existingUser) {
    throw new Error('User already exists');
  }

  const hashedPassword = await hash(password, 12);
let token = 'aaa';
  try {
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;
    await sendEmailVerification(user);

    // Get the ID token from Firebase Auth
    token = await getIdToken(user);
  } catch (error) {
    console.error('Error creating user in Firebase:', error);
    throw new Error('Failed to create user in Firebase');
  }

  const newUser = await User.create({
    firstname: firstName,
    lastname: lastName,
    email,
    password: hashedPassword,
  });

  // Return a plain object
  return {
    id: newUser._id.toString(), // Convert ObjectId to string
    firstname: newUser.firstname,
    lastname: newUser.lastname,
    email: newUser.email,
    token:token
  };
}



================================================
File: src/app/components/DoctorAppointmentCard.tsx
================================================
import React from 'react';
import { MapPin, Calendar, Clock, ArrowRight } from 'lucide-react';

interface Doctor {
  name: string;
  imageUrl: string;
  appointmentDate: string;
  time?: string;
  location: string;
}

interface DoctorAppointmentCardProps {
  doctor: Doctor;
}

const DoctorAppointmentCard: React.FC<DoctorAppointmentCardProps> = ({ doctor }) => {
  const appointmentDate = new Date(doctor.date);
  const formattedDate = appointmentDate.toLocaleDateString('en-US', {
    day: 'numeric',
    month: 'short',
    year: '2-digit',
  });

  console.log("Doctos: ",{doctor})
  return (
    <div className="group bg-white rounded-2xl shadow-sm hover:shadow-xl transition-all duration-300 border border-emerald-100/50">
      <div className="relative p-6">
        {/* Background accent */}
        <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-bl from-emerald-50 to-transparent rounded-tr-2xl" />
        
        <div className="flex flex-col md:flex-row gap-6 relative">
          {/* Doctor Image Section */}
          <div className="flex-shrink-0">
            <div className="relative group-hover:scale-105 transition-transform duration-300">
              <div className="absolute inset-0 bg-gradient-to-br from-emerald-400 to-emerald-600 rounded-full blur-md opacity-20 group-hover:opacity-30 transition-opacity" />
              <div className="relative w-24 h-24 rounded-full overflow-hidden border-4 border-white shadow-md">
                <img
                  src={doctor.imageUrl}
                  alt={doctor.name}
                  className="w-full h-full object-cover"
                />
              </div>
            </div>
          </div>

          {/* Content Section */}
          <div className="flex-grow space-y-4">
            {/* Header */}
            <div className="flex justify-between items-start">
              <div className="space-y-2">
                <h3 className="text-xl font-semibold text-gray-800 group-hover:text-emerald-700 transition-colors">
                  {doctor.doctorName}
                </h3>
                <div className="flex gap-2">
                  <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-emerald-50 text-emerald-700 border border-emerald-100">
                    <div className="w-1.5 h-1.5 rounded-full bg-emerald-500 mr-2 animate-pulse" />
                    Upcoming
                  </span>
                </div>
              </div>
              <button
                className="inline-flex items-center gap-2 px-4 py-2 rounded-full bg-emerald-50 text-emerald-700 hover:bg-emerald-100 hover:text-emerald-800 transition-all duration-300 text-sm font-medium group/btn"
                onClick={() => console.log('Reschedule clicked')}
              >
                <span>Reschedule</span>
                <ArrowRight className="w-4 h-4 group-hover/btn:translate-x-1 transition-transform" />
              </button>
            </div>

            {/* Details Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 pt-2">
              <div className="flex items-center px-4 py-3 rounded-xl bg-gray-50 hover:bg-emerald-50/50 transition-colors">
                <Calendar className="w-5 h-5 text-emerald-600 mr-3" />
                <div>
                  <p className="text-xs text-gray-500 font-medium">Date</p>
                  <p className="text-sm text-gray-700">{formattedDate}</p>
                </div>
              </div>
              <div className="flex items-center px-4 py-3 rounded-xl bg-gray-50 hover:bg-emerald-50/50 transition-colors">
                <Clock className="w-5 h-5 text-emerald-600 mr-3" />
                <div>
                  <p className="text-xs text-gray-500 font-medium">Time</p>
                  <p className="text-sm text-gray-700">{doctor.time || '10:00 AM'}</p>
                </div>
              </div>
              <div className="flex items-center px-4 py-3 rounded-xl bg-gray-50 hover:bg-emerald-50/50 transition-colors">
                <MapPin className="w-5 h-5 text-emerald-600 mr-3" />
                <div>
                  <p className="text-xs text-gray-500 font-medium">Attock City</p>
                  <p className="text-sm text-gray-700">{doctor.location}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DoctorAppointmentCard;



================================================
File: src/app/components/DoctorRecommendationComponent.tsx
================================================
import React from 'react'

const DoctorRecommendationComponent = () => {
  return (
    <div>DoctorRecommendationComponent</div>
  )
}

export default DoctorRecommendationComponent


================================================
File: src/app/components/Footer.tsx
================================================



================================================
File: src/app/components/Header.tsx
================================================
"use client";

import React, { useState, useEffect } from "react";
import { useRouter, usePathname } from "next/navigation";
import Link from "next/link";
import {
  Menu,
  ArrowLeft,
  LogOut,
  MessageSquare,
  User,
  Bot,
  Home,
  Settings,
  HelpCircle,
  X
} from "lucide-react";
import { auth } from '../../lib/firebase';
import { signOut } from 'firebase/auth';
import Logo from "./Logo";

const Header: React.FC = () => {
  const [showDrawer, setShowDrawer] = useState(false);
  const [user, setUser] = useState<{ name: string } | null>(null);
  const router = useRouter();
  const pathname = usePathname();

  const navLinks = [
    { href: "/dashboard", label: "Dashboard", icon: <Home className="w-5 h-5" /> },
    { href: "/chatscreen", label: "Chat Screen", icon: <MessageSquare className="w-5 h-5" /> },
    { href: "/doctorscreen", label: "Doctor Screen", icon: <User className="w-5 h-5" /> },
    { href: "/login", label: "Login", icon: <LogOut className="w-5 h-5" /> },
    { href: "/signup", label: "Signup", icon: <User className="w-5 h-5" /> },
  ];

  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged(user => {
      if (user) {
        setUser({ name: user.displayName || "Guest" });
      } else {
        setUser(null);
      }
    });
    return () => unsubscribe();
  }, []);

  useEffect(() => {
    setShowDrawer(false);
  }, [pathname]);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const sidebar = document.getElementById('sidebar');
      const menuButton = document.getElementById('menu-button');

      if (sidebar &&
        !sidebar.contains(event.target as Node) &&
        menuButton &&
        !menuButton.contains(event.target as Node)) {
        setShowDrawer(false);
      }
    };

    if (showDrawer) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showDrawer]);

  return (
    <>
      <header className="fixed top-0 left-0 right-0 z-40 border-b border-white/20 backdrop-blur-sm bg-white/30">
        <div className="container mx-auto px-4 py-3 flex justify-between items-center">
          {/* Menu Button */}
          <button
            id="menu-button"
            onClick={() => setShowDrawer(!showDrawer)}
            className="p-2 hover:bg-[#6366F1]/10 rounded-lg transition-colors"
          >
            {showDrawer ? (
              <ArrowLeft className="w-6 h-6 text-[#6366F1]" />
            ) : (
              <Menu className="w-6 h-6 text-[#6366F1]" />
            )}
          </button>

          {/* Logo */}
          <Logo />

          {/* Logout */}
          <button
            onClick={async () => {
              try {
                await signOut(auth);
                router.push("/login");
              } catch (error) {
                console.error("Error signing out: ", error);
              }
            }}
            className="flex items-center gap-2 px-4 py-2 rounded-lg text-[#6366F1] hover:bg-[#6366F1]/10 transition-colors"
          >
            <LogOut className="w-5 h-5" />
            <span className="hidden sm:inline">Logout</span>
          </button>
        </div>
      </header>

      {/* Overlay */}
      {showDrawer && (
        <div className="fixed inset-0 bg-black/20 backdrop-blur-sm z-40" />
      )}

      {/* Sidebar */}
      <aside
        id="sidebar"
        className={`fixed top-0 left-0 h-full w-72 bg-gradient-to-b from-white/90 to-white/70 backdrop-blur-sm shadow-xl z-50 transform transition-transform duration-300 ease-in-out ${showDrawer ? 'translate-x-0' : '-translate-x-full'}`}
      >
        {/* Sidebar Header */}
        <div className="p-4 border-b border-white/20 flex justify-between items-center">
          <div className="flex items-center gap-2">
            <div className="p-2 bg-gradient-to-br from-[#6366F1] to-[#8B5CF6] rounded-lg">
              <Bot className="w-5 h-5 text-white" />
            </div>
            <h2 className="text-lg font-semibold text-gray-800">
              Hello, {user ? user.name : "Guest"}
            </h2>
          </div>
          <button
            onClick={() => setShowDrawer(false)}
            className="p-1 hover:bg-[#6366F1]/10 rounded-lg transition-colors"
          >
            <X className="w-5 h-5 text-[#6366F1]" />
          </button>
        </div>

        {/* Navigation Links */}
        <div className="py-4">
          {navLinks.map((link) => (
            <Link
              key={link.href}
              href={link.href}
              className={`flex items-center gap-3 px-4 py-3 text-gray-600 hover:bg-[#6366F1]/10 hover:text-[#6366F1] transition-colors ${pathname === link.href ? 'bg-[#6366F1]/10 text-[#6366F1] border-r-4 border-[#6366F1]' : ''}`}
            >
              {link.icon}
              <span className="font-medium">{link.label}</span>
            </Link>
          ))}
        </div>

        {/* Sidebar Footer */}
        <div className="absolute bottom-0 left-0 right-0 p-4 border-t border-white/20">
          <Link
            href="/help"
            className="flex items-center gap-3 px-4 py-3 text-gray-600 hover:bg-[#6366F1]/10 hover:text-[#6366F1] rounded-lg transition-colors"
          >
            <HelpCircle className="w-5 h-5" />
            <span className="font-medium">Help & Support</span>
          </Link>
        </div>
      </aside>
    </>
  );
};

export default Header;


================================================
File: src/app/components/Logo.tsx
================================================
// components/Logo.tsx
import React from 'react';
import { Bot } from 'lucide-react';

const Logo = () => {
  return (
    <div className="flex items-center gap-3 cursor-pointer select-none">
      <div className="p-2 bg-gradient-to-br from-[#6366F1] to-[#8B5CF6] rounded-lg">
        <Bot className="w-7 h-7 text-white" />
      </div>
      <h1 className="text-3xl font-bold text-gray-900">
        Health<span className="bg-gradient-to-r from-[#6366F1] to-[#8B5CF6] bg-clip-text text-transparent">Bot</span>
      </h1>
    </div>
  );
};

export default Logo;



================================================
File: src/lib/dbconnect.ts
================================================
import mongoose from "mongoose";

type connectionObject = {
  isConnect?: number;
};

const connection: connectionObject = {};

async function dbConnect(): Promise<void> {
  if (connection.isConnect) {
    console.log("Already Connected to database. ℹ");
    return;
  }

  try {
    console.log("Mongodb URI: ", process.env.MONGODB_URI);
    const db = await mongoose.connect(process.env.MONGODB_URI || "", {});

    connection.isConnect = db.connections[0].readyState;

    console.log("DB Connection Successful ✔");
  } catch (error) {
    console.error(
      "dbConnect.ts",
      " :: dbConnect() :: DB Connection failed ❌ Error : ",
      error
    );

  }
}

export default dbConnect;



================================================
File: src/lib/firebase.ts
================================================
// src/lib/firebase.ts
import { initializeApp } from 'firebase/app';
import { getAuth, GoogleAuthProvider } from 'firebase/auth';
import { getStorage } from 'firebase/storage';
import { getApp } from 'firebase-admin/app'; // For Admin SDK

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const googleProvider = new GoogleAuthProvider();
const storage = getStorage(app);
const database = getAuth(app)
export { auth, googleProvider, storage, app , database};



================================================
File: src/lib/firebaseAdmin.ts
================================================
// src/lib/firebase-admin.ts
import admin from 'firebase-admin';
  
const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT_KEY as string);
console.log(serviceAccount)
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
  });
}

export const authAdmin = admin.auth();



================================================
File: src/lib/getSession.ts
================================================
import { auth } from "@/auth";
import { cache } from "react";

export const getSession = cache(async () => {
  const session = await auth();
  return session;
});


================================================
File: src/lib/scrapeDoctors.js
================================================
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.scrapeDoctors = void 0;
var axios_1 = require("axios");
var cheerio = require("cheerio");
// Function to scrape the top 5 doctors from a location
var scrapeDoctors = function (location) { return __awaiter(void 0, void 0, void 0, function () {
    var url, response, html, $_1, doctors_1, error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                console.log('Scraping started for location:', location);
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                url = "https://oladoc.com/pakistan/".concat(encodeURIComponent(location), "/condition/dengue");
                console.log('Requesting data from URL:', url);
                return [4 /*yield*/, axios_1.default.get(url, {
                        headers: {
                            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                        },
                    })];
            case 2:
                response = _a.sent();
                html = response.data;
                console.log('HTML received:', html); // Inspect the raw HTML content
                $_1 = cheerio.load(html);
                doctors_1 = [];
                // Select the top 5 doctors based on CSS classes and structure
                // Adjust the selectors as needed based on the actual page structure
                $_1('.doctor-card-class').slice(0, 5).each(function (_index, element) {
                    var name = $_1(element).find('doctor-name').text().trim() || 'N/A';
                    // const address = $(element).find('.doctor-address-class').text().trim() || 'N/A';
                    // const rating = parseFloat($(element).find('.doctor-rating-class').text().trim()) || 0; // Assuming rating is numeric
                    // const distance = $(element).find('.doctor-distance-class').text().trim() || 'N/A';
                    var specialization = $_1(element).find('.doc-degree ').text().trim() || 'N/A';
                    // const available = $(element).find('.doctor-availability-class').text().trim() || 'N/A';
                    // Push each doctor's info into the array
                    doctors_1.push({
                        name: name,
                        // address,
                        // rating,
                        // distance,
                        specialization: specialization,
                        // available,
                    });
                });
                console.log('Formatted doctors list:', doctors_1);
                return [2 /*return*/, doctors_1];
            case 3:
                error_1 = _a.sent();
                console.error('Error during scraping:', error_1.message);
                return [2 /*return*/, []];
            case 4: return [2 /*return*/];
        }
    });
}); };
exports.scrapeDoctors = scrapeDoctors;



================================================
File: src/lib/scrapeDoctors.ts
================================================
import axios from 'axios';
import * as cheerio from 'cheerio';

// Function to scrape the top 5 doctors from a location
export const scrapeDoctors = async (location: string): Promise<{ name: string; address: string; rating: number; distance: string; specialization: string; available: string }[]> => {
    console.log('Scraping started for location:', location);

    try {
        // URL for the given location, condition 'dengue' in this case
        const url = `https://oladoc.com/pakistan/${encodeURIComponent(location)}/condition/dengue`;
        console.log('Requesting data from URL:', url);

        const response = await axios.get(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            },
        });

        const html = response.data;
        console.log('HTML received:', html); // Inspect the raw HTML content

        const $ = cheerio.load(html);
        const doctors: { name: string; address: string; rating: number; distance: string; specialization: string; available: string }[] = [];

        // Select the top 5 doctors based on CSS classes and structure
        // Adjust the selectors as needed based on the actual page structure
        $('.doctor-card-class').slice(0, 5).each((_index, element) => {
            const name = $(element).find('doctor-name').text().trim() || 'N/A';
            const address = $(element).find('.doctor-address-class').text().trim() || 'N/A';
            const rating = parseFloat($(element).find('.doctor-rating-class').text().trim()) || 0; // Assuming rating is numeric
            const distance = $(element).find('.doctor-distance-class').text().trim() || 'N/A';
            const specialization = $(element).find('.text-truncate ').text().trim() || 'N/A';
            const available = $(element).find('.doctor-availability-class').text().trim() || 'N/A';

            // Push each doctor's info into the array
            doctors.push({
                name,
                address,
                rating,
                distance,
                specialization,
                available,
            });
        });

        console.log('Formatted doctors list:', doctors);
        return doctors;

    } catch (error) {
        console.error('Error during scraping:', error.message);
        return [];
    }
};



================================================
File: src/lib/scraper/oladoc-scraper.js
================================================
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
// import puppeteer from 'puppeteer';
var puppeteer = require('puppeteer');
var OladocScraper = /** @class */ (function () {
    function OladocScraper(city) {
        this.city = city;
    }
    OladocScraper.prototype.scrape = function () {
        return __awaiter(this, void 0, void 0, function () {
            var browser, page, doctors;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, puppeteer.launch()];
                    case 1:
                        browser = _a.sent();
                        return [4 /*yield*/, browser.newPage()];
                    case 2:
                        page = _a.sent();
                        return [4 /*yield*/, page.goto("https://oladoc.com/pakistan/".concat(this.city.toLowerCase(), "/general-physician"), {
                                waitUntil: 'networkidle2',
                            })];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, page.evaluate(function () {
                                var doctorElements = document.querySelectorAll('.row.doctor-picture-frame');
                                return Array.from(doctorElements).map(function (doctor) {
                                    var _a, _b, _c, _d, _e, _f, _g, _h;
                                    var name = ((_b = (_a = doctor.querySelector('.doctor-name')) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.trim()) || '';
                                    var speciality = ((_d = (_c = doctor.querySelector('.od-text-dark-muted')) === null || _c === void 0 ? void 0 : _c.textContent) === null || _d === void 0 ? void 0 : _d.trim()) || '';
                                    var experience = ((_f = (_e = doctor.querySelector('.text-truncate')) === null || _e === void 0 ? void 0 : _e.textContent) === null || _f === void 0 ? void 0 : _f.trim()) || '';
                                    var image = ((_g = doctor.querySelector('.avatar img')) === null || _g === void 0 ? void 0 : _g.getAttribute('src')) || '';
                                    var profileLink = ((_h = doctor.querySelector('.doctor-name')) === null || _h === void 0 ? void 0 : _h.getAttribute('href')) || '';
                                    return {
                                        name: name,
                                        speciality: speciality,
                                        experience: experience,
                                        image: image,
                                        profileLink: profileLink,
                                    };
                                });
                            })];
                    case 4:
                        doctors = _a.sent();
                        return [4 /*yield*/, browser.close()];
                    case 5:
                        _a.sent();
                        console.log(doctors); // Logs the scraped doctors
                        return [2 /*return*/, doctors];
                }
            });
        });
    };
    return OladocScraper;
}());
(function () { return __awaiter(_this, void 0, void 0, function () {
    var scraper;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                scraper = new OladocScraper("lahore");
                return [4 /*yield*/, scraper.scrape()];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); })();



================================================
File: src/lib/scraper/oladoc-scraper.ts
================================================
// import puppeteer from 'puppeteer';
const puppeteer = require('puppeteer');

interface Doctor {
  name: string;
  speciality: string;
  experience: string;
  image: string;
  profileLink: string;
}

 class OladocScraper {
  
  constructor(private city: string) {}

  async scrape(): Promise<Doctor[]> {
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.goto(`https://oladoc.com/pakistan/${this.city.toLowerCase()}/general-physician`, {
      waitUntil: 'networkidle2',
    });

    const doctors = await page.evaluate(() => {
      const doctorElements = document.querySelectorAll('.row.doctor-picture-frame');
      return Array.from(doctorElements).map((doctor) => {
        const name = doctor.querySelector('.doctor-name')?.textContent?.trim() || '';
        const speciality = doctor.querySelector('.od-text-dark-muted')?.textContent?.trim() || '';
        const experience = doctor.querySelector('.text-truncate')?.textContent?.trim() || '';
        const image = doctor.querySelector('.avatar img')?.getAttribute('src') || '';
        const profileLink =
          doctor.querySelector('.doctor-name')?.getAttribute('href') || '';

        return {
          name,
          speciality,
          experience,
          image,
          profileLink,
        };
      });
    });

    await browser.close();
    console.log(doctors); // Logs the scraped doctors
    return doctors;
  }
}

(async () => {
  const scraper = new OladocScraper("lahore");
  await scraper.scrape();
})();



================================================
File: src/models/Dashboard.ts
================================================
import mongoose, { Document, Schema } from 'mongoose';

interface IAppointment extends Document {
    name: string;
    date: Date;
    time: string;
    phone: string;
    email: string;
    doctorName: string;
    specialization: string;
}

const appointmentSchema: Schema = new Schema({
    name: {
        type: String,
        required: true,
    },
    date: {
        type: Date,
        required: true,
    },
    time: {
        type: String,
        required: true,
    },
    phone: {
        type: String,
        required: true,
    },
    email: {
        type: String,
        required: true,
    },
    doctorName: {
        type: String,
        required: true,
    },
    specialization: {
        type: String,
        required: true,
    },
}, {
    timestamps: true, // This will add createdAt and updatedAt timestamps
});

const Appointment = mongoose.model<IAppointment>('Appointment', appointmentSchema);

export default Appointment;



================================================
File: src/models/User.ts
================================================
import mongoose, { Document, Model, Schema } from "mongoose";

interface IUser extends Document {
  firstname: string;
  lastname: string;
  email: string;
  uid: string;
  password?: string;
  role?: string;
  image?: string;
  authProviderId?: string;
}

const userSchema: Schema<IUser> = new mongoose.Schema({
  firstname: { type: String, required: true },
  lastname: { type: String, required: true },
  email: { type: String, required: true },
  uid: {
    type: String,
    required: true,
  },
  password: { type: String, select: false },
  role: { type: String, default: "users" },
  image: { type: String, default: "" },
  authProviderId: { type: String },
});

// Check if the model already exists in mongoose.models to prevent overwriting
const User: Model<IUser> =
  mongoose.models?.User || mongoose.model<IUser>("User", userSchema);

export default User;



================================================
File: src/types/ApiResponse.ts
================================================



================================================
File: src/utils/api.js
================================================
export const sendMessageToHealthBot = async (userMessage) => {
    try {
        const response = await fetch("http://localhost:5000/healthbot_chat", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ query: userMessage }),
        });

        const data = await response.json();
        return data.answer; // Extract response
    } catch (error) {
        console.error("Error calling HealthBot API:", error);
        return "Sorry, something went wrong.";
    }
};


